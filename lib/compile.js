"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;
function compile(BaseSet, BaseMap, DoublyLinkedList, core) {

	var Set = core.set._Set(BaseSet);
	var Dict = core.dict.dict._Dict(BaseMap);
	var OrderedDict = core.dict.ordereddict._OrderedDict(Dict, BaseMap, DoublyLinkedList);
	var NamedTuple = core.namedtuple._NamedTuple(Dict, OrderedDict);
	var DefaultDict = core.dict.defaultdict._DefaultDict(Dict, BaseMap);
	var ChainMap = core.chainmap._ChainMap(Dict, Set);
	var Counter = core.counter._Counter(BaseMap, Dict);
	var namedtuple = core.namedtuple._namedtuple(NamedTuple);
	var Deque = core.deque.implementation.Deque;
	var ArbitrarySizeDeque = core.deque.implementation.ArbitrarySizeDeque;
	var UnboundedDeque = core.deque.implementation.UnboundedDeque;
	var BoundedDeque = core.deque.implementation.BoundedDeque;
	var SingleElementDeque = core.deque.implementation.SingleElementDeque;
	var EmptyDeque = core.deque.implementation.EmptyDeque;

	var all = {};

	all.bisect = core.bisect;

	all.heapq = core.heapq;

	all.Set = Set;
	all.set = core.set._set(Set);

	all.Mapping = core.mapping;

	all.Dict = Dict;
	all.dict = core.dict.dict._dict(Dict);
	all.OrderedDict = OrderedDict;
	all.ordereddict = core.dict.ordereddict._ordereddict(OrderedDict);
	all.DefaultDict = DefaultDict;
	all.defaultdict = core.dict.defaultdict._defaultdict(DefaultDict);

	all.ChainMap = ChainMap;
	all.chainmap = core.chainmap._chainmap(ChainMap);

	all.Counter = Counter;
	all.counter = core.counter._counter(Counter);

	all.NamedTuple = NamedTuple;
	all.namedtuple = namedtuple;

	all.deque = core.deque._deque(UnboundedDeque, BoundedDeque, SingleElementDeque, EmptyDeque);
	all.Deque = Deque;
	all.ArbitrarySizeDeque = ArbitrarySizeDeque;
	all.UnboundedDeque = UnboundedDeque;
	all.BoundedDeque = BoundedDeque;
	all.SingleElementDeque = SingleElementDeque;
	all.EmptyDeque = EmptyDeque;

	all.IndexError = core.error.IndexError;
	all.KeyError = core.error.KeyError;
	all.NotImplementedError = core.error.NotImplementedError;
	all.TypeError = core.error.TypeError;
	all.ValueError = core.error.ValueError;

	return all;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLmpzIl0sIm5hbWVzIjpbImNvbXBpbGUiLCJCYXNlU2V0IiwiQmFzZU1hcCIsIkRvdWJseUxpbmtlZExpc3QiLCJjb3JlIiwiU2V0Iiwic2V0IiwiX1NldCIsIkRpY3QiLCJkaWN0IiwiX0RpY3QiLCJPcmRlcmVkRGljdCIsIm9yZGVyZWRkaWN0IiwiX09yZGVyZWREaWN0IiwiTmFtZWRUdXBsZSIsIm5hbWVkdHVwbGUiLCJfTmFtZWRUdXBsZSIsIkRlZmF1bHREaWN0IiwiZGVmYXVsdGRpY3QiLCJfRGVmYXVsdERpY3QiLCJDaGFpbk1hcCIsImNoYWlubWFwIiwiX0NoYWluTWFwIiwiQ291bnRlciIsImNvdW50ZXIiLCJfQ291bnRlciIsIl9uYW1lZHR1cGxlIiwiRGVxdWUiLCJkZXF1ZSIsImltcGxlbWVudGF0aW9uIiwiQXJiaXRyYXJ5U2l6ZURlcXVlIiwiVW5ib3VuZGVkRGVxdWUiLCJCb3VuZGVkRGVxdWUiLCJTaW5nbGVFbGVtZW50RGVxdWUiLCJFbXB0eURlcXVlIiwiYWxsIiwiYmlzZWN0IiwiaGVhcHEiLCJfc2V0IiwiTWFwcGluZyIsIm1hcHBpbmciLCJfZGljdCIsIl9vcmRlcmVkZGljdCIsIl9kZWZhdWx0ZGljdCIsIl9jaGFpbm1hcCIsIl9jb3VudGVyIiwiX2RlcXVlIiwiSW5kZXhFcnJvciIsImVycm9yIiwiS2V5RXJyb3IiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiVHlwZUVycm9yIiwiVmFsdWVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQ3dCQSxPO0FBQVQsU0FBU0EsT0FBVCxDQUFtQkMsT0FBbkIsRUFBNkJDLE9BQTdCLEVBQXVDQyxnQkFBdkMsRUFBMERDLElBQTFELEVBQWlFOztBQUUvRSxLQUFNQyxNQUFNRCxLQUFLRSxHQUFMLENBQVNDLElBQVQsQ0FBZU4sT0FBZixDQUFaO0FBQ0EsS0FBTU8sT0FBT0osS0FBS0ssSUFBTCxDQUFVQSxJQUFWLENBQWVDLEtBQWYsQ0FBc0JSLE9BQXRCLENB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QUlKLGNBQUosR0FBcUJBLGNBQXJCO0FBQ0FJLEtBQUlILFlBQUosR0FBbUJBLFlBQW5CO0FBQ0FHLEtBQUlGLGtCQUFKLEdBQXlCQSxrQkFBekI7QUFDQUUsS0FBSUQsVUFBSixHQUFpQkEsVUFBakI7O0FBRUFDLEtBQUlZLFVBQUosR0FBaUIzQyxLQUFLNEMsS0FBTCxDQUFXRCxVQUE1QjtBQUNBWixLQUFJYyxRQUFKLEdBQWU3QyxLQUFLNEMsS0FBTCxDQUFXQyxRQUExQjtBQUNBZCxLQUFJZSxtQkFBSixHQUEwQjlDLEtBQUs0QyxLQUFMLENBQVdFLG1CQUFyQztBQUNBZixLQUFJZ0IsU0FBSixHQUFnQi9DLEtBQUs0QyxLQUFMLENBQVdHLFNBQTNCO0FBQ0FoQixLQUFJaUIsVUFBSixHQUFpQmhELEtBQUs0QyxLQUFMLENBQVdJLFVBQTVCOztBQUVBLFFBQU9qQixHQUFQO0FBRUEiLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGlsZSAoIEJhc2VTZXQgLCBCYXNlTWFwICwgRG91Ymx5TGlua2VkTGlzdCAsIGNvcmUgKSB7XG5cblx0Y29uc3QgU2V0ID0gY29yZS5zZXQuX1NldCggQmFzZVNldCApIDtcblx0Y29uc3QgRGljdCA9IGNvcmUuZGljdC5kaWN0Ll9EaWN0KCBCYXNlTWFwICkgO1xuXHRjb25zdCBPcmRlcmVkRGljdCA9IGNvcmUuZGljdC5vcmRlcmVkZGljdC5fT3JkZXJlZERpY3QoIERpY3QgLCBCYXNlTWFwICwgRG91Ymx5TGlua2VkTGlzdCApIDtcblx0Y29uc3QgTmFtZWRUdXBsZSA9IGNvcmUubmFtZWR0dXBsZS5fTmFtZWRUdXBsZSggRGljdCAsIE9yZGVyZWREaWN0ICkgO1xuXHRjb25zdCBEZWZhdWx0RGljdCA9IGNvcmUuZGljdC5kZWZhdWx0ZGljdC5fRGVmYXVsdERpY3QoIERpY3QgLCBCYXNlTWFwICkgO1xuXHRjb25zdCBDaGFpbk1hcCA9IGNvcmUuY2hhaW5tYXAuX0NoYWluTWFwKCBEaWN0ICwgU2V0ICkgO1xuXHRjb25zdCBDb3VudGVyID0gY29yZS5jb3VudGVyLl9Db3VudGVyKCBCYXNlTWFwICwgRGljdCApIDtcblx0Y29uc3QgbmFtZWR0dXBsZSA9IGNvcmUubmFtZWR0dXBsZS5fbmFtZWR0dXBsZSggTmFtZWRUdXBsZSApIDtcblx0Y29uc3QgRGVxdWUgPSBjb3JlLmRlcXVlLmltcGxlbWVudGF0aW9uLkRlcXVlIDtcblx0Y29uc3QgQXJiaXRyYXJ5U2l6ZURlcXVlID0gY29yZS5kZXF1ZS5pbXBsZW1lbnRhdGlvbi5BcmJpdHJhcnlTaXplRGVxdWUgO1xuXHRjb25zdCBVbmJvdW5kZWREZXF1ZSA9IGNvcmUuZGVxdWUuaW1wbGVtZW50YXRpb24uVW5ib3VuZGVkRGVxdWUgO1xuXHRjb25zdCBCb3VuZGVkRGVxdWUgPSBjb3JlLmRlcXVlLmltcGxlbWVudGF0aW9uLkJvdW5kZWREZXF1ZSA7XG5cdGNvbnN0IFNpbmdsZUVsZW1lbnREZXF1ZSA9IGNvcmUuZGVxdWUuaW1wbGVtZW50YXRpb24uU2luZ2xlRWxlbWVudERlcXVlIDtcblx0Y29uc3QgRW1wdHlEZXF1ZSA9IGNvcmUuZGVxdWUuaW1wbGVtZW50YXRpb24uRW1wdHlEZXF1ZSA7XG5cblx0Y29uc3QgYWxsID0geyB9IDtcblxuXHRhbGwuYmlzZWN0ID0gY29yZS5iaXNlY3QgO1xuXG5cdGFsbC5oZWFwcSA9IGNvcmUuaGVhcHEgO1xuXG5cdGFsbC5TZXQgPSBTZXQgO1xuXHRhbGwuc2V0ID0gY29yZS5zZXQuX3NldCggU2V0ICkgO1xuXG5cdGFsbC5NYXBwaW5nID0gY29yZS5tYXBwaW5nIDtcblxuXHRhbGwuRGljdCA9IERpY3QgO1xuXHRhbGwuZGljdCA9IGNvcmUuZGljdC5kaWN0Ll9kaWN0KCBEaWN0ICkgO1xuXHRhbGwuT3JkZXJlZERpY3QgPSBPcmRlcmVkRGljdCA7XG5cdGFsbC5vcmRlcmVkZGljdCA9IGNvcmUuZGljdC5vcmRlcmVkZGljdC5fb3JkZXJlZGRpY3QoIE9yZGVyZWREaWN0ICkgO1xuXHRhbGwuRGVmYXVsdERpY3QgPSBEZWZhdWx0RGljdCA7XG5cdGFsbC5kZWZhdWx0ZGljdCA9IGNvcmUuZGljdC5kZWZhdWx0ZGljdC5fZGVmYXVsdGRpY3QoIERlZmF1bHREaWN0ICkgO1xuXG5cdGFsbC5DaGFpbk1hcCA9IENoYWluTWFwIDtcblx0YWxsLmNoYWlubWFwID0gY29yZS5jaGFpbm1hcC5fY2hhaW5tYXAoIENoYWluTWFwICkgO1xuXG5cdGFsbC5Db3VudGVyID0gQ291bnRlciA7XG5cdGFsbC5jb3VudGVyID0gY29yZS5jb3VudGVyLl9jb3VudGVyKCBDb3VudGVyICkgO1xuXG5cdGFsbC5OYW1lZFR1cGxlID0gTmFtZWRUdXBsZSA7XG5cdGFsbC5uYW1lZHR1cGxlID0gbmFtZWR0dXBsZSA7XG5cblx0YWxsLmRlcXVlID0gY29yZS5kZXF1ZS5fZGVxdWUoIFVuYm91bmRlZERlcXVlICwgQm91bmRlZERlcXVlICwgU2luZ2xlRWxlbWVudERlcXVlICwgRW1wdHlEZXF1ZSApIDtcblx0YWxsLkRlcXVlID0gRGVxdWUgO1xuXHRhbGwuQXJiaXRyYXJ5U2l6ZURlcXVlID0gQXJiaXRyYXJ5U2l6ZURlcXVlIDtcblx0YWxsLlVuYm91bmRlZERlcXVlID0gVW5ib3VuZGVkRGVxdWUgO1xuXHRhbGwuQm91bmRlZERlcXVlID0gQm91bmRlZERlcXVlIDtcblx0YWxsLlNpbmdsZUVsZW1lbnREZXF1ZSA9IFNpbmdsZUVsZW1lbnREZXF1ZSA7XG5cdGFsbC5FbXB0eURlcXVlID0gRW1wdHlEZXF1ZSA7XG5cblx0YWxsLkluZGV4RXJyb3IgPSBjb3JlLmVycm9yLkluZGV4RXJyb3IgO1xuXHRhbGwuS2V5RXJyb3IgPSBjb3JlLmVycm9yLktleUVycm9yIDtcblx0YWxsLk5vdEltcGxlbWVudGVkRXJyb3IgPSBjb3JlLmVycm9yLk5vdEltcGxlbWVudGVkRXJyb3IgO1xuXHRhbGwuVHlwZUVycm9yID0gY29yZS5lcnJvci5UeXBlRXJyb3IgO1xuXHRhbGwuVmFsdWVFcnJvciA9IGNvcmUuZXJyb3IuVmFsdWVFcnJvciA7XG5cblx0cmV0dXJuIGFsbCA7XG5cbn1cbiJdfQ==