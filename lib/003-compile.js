"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var compile = exports.compile = function compile(BaseSet, BaseMap, DLL) {
	var exports = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};


	var Set = exports._Set(BaseSet);
	var Dict = exports._Dict(BaseMap);
	var OrderedDict = exports._OrderedDict(Dict, BaseMap, DLL);
	var NamedTuple = exports._NamedTuple(Dict, OrderedDict);
	var DefaultDict = exports._DefaultDict(Dict, BaseMap);
	var ChainMap = exports._ChainMap(Dict, Set);
	var Counter = exports._Counter(BaseMap, Dict);
	var namedtuple = exports._namedtuple(NamedTuple);

	exports.bisect = bisect;

	exports.heapq = heapq;

	exports.Set = Set;
	exports.set = exports._set(Set);

	exports.Mapping = Mapping;

	exports.Dict = Dict;
	exports.dict = exports._dict(Dict);

	exports.OrderedDict = OrderedDict;
	exports.ordereddict = exports._ordereddict(OrderedDict);

	exports.DefaultDict = DefaultDict;
	exports.defaultdict = exports._defaultdict(DefaultDict);

	exports.ChainMap = ChainMap;
	exports.chainmap = exports._chainmap(ChainMap);

	exports.Counter = Counter;
	exports.counter = exports._counter(Counter);
	exports.NamedTuple = NamedTuple;
	exports.namedtuple = namedtuple;

	exports.deque = exports._deque(UnboundedDeque, BoundedDeque, SingleElementDeque, EmptyDeque);
	exports.Deque = Deque;
	exports.UnboundedDeque = UnboundedDeque;
	exports.BoundedDeque = BoundedDeque;
	exports.SingleElementDeque = SingleElementDeque;
	exports.EmptyDeque = EmptyDeque;

	exports.IndexError = IndexError;
	exports.KeyError = KeyError;
	exports.NotImplementedError = NotImplementedError;
	exports.TypeError = exports.TypeError;
	exports.ValueError = ValueError;

	return exports;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy8wMDMtY29tcGlsZS5qcyJdLCJuYW1lcyI6WyJjb21waWxlIiwiQmFzZVNldCIsIkJhc2VNYXAiLCJETEwiLCJleHBvcnRzIiwiU2V0IiwiX1NldCIsIkRpY3QiLCJfRGljdCIsIk9yZGVyZWREaWN0IiwiX09yZGVyZWREaWN0IiwiTmFtZWRUdXBsZSIsIl9OYW1lZFR1cGxlIiwiRGVmYXVsdERpY3QiLCJfRGVmYXVsdERpY3QiLCJDaGFpbk1hcCIsIl9DaGFpbk1hcCIsIkNvdW50ZXIiLCJfQ291bnRlciIsIm5hbWVkdHVwbGUiLCJfbmFtZWR0dXBsZSIsImJpc2VjdCIsImhlYXBxIiwic2V0IiwiX3NldCIsIk1hcHBpbmciLCJkaWN0IiwiX2RpY3QiLCJvcmRlcmVkZGljdCIsIl9vcmRlcmVkZGljdCIsImRlZmF1bHRkaWN0IiwiX2RlZmF1bHRkaWN0IiwiY2hhaW5tYXAiLCJfY2hhaW5tYXAiLCJjb3VudGVyIiwiX2NvdW50ZXIiLCJkZXF1ZSIsIl9kZXF1ZSIsIlVuYm91bmRlZERlcXVlIiwiQm91bmRlZERlcXVlIiwiU2luZ2xlRWxlbWVudERlcXVlIiwiRW1wdHlEZXF1ZSIsIkRlcXVlIiwiSW5kZXhFcnJvciIsIktleUVycm9yIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsIlR5cGVFcnJvciIsIlZhbHVlRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ08sSUFBTUEsNEJBQVUsU0FBVkEsT0FBVSxDQUFXQyxPQUFYLEVBQXFCQyxPQUFyQixFQUErQkMsR0FBL0IsRUFBcUQ7QUFBQSxLQUFoQkMsT0FBZ0IsdUVBQU4sRUFBTTs7O0FBRTNFLEtBQU1DLE1BQU1ELFFBQVFFLElBQVIsQ0FBY0wsT0FBZCxDQUFaO0FBQ0EsS0FBTU0sT0FBT0gsUUFBUUksS0FBUixDQUFlTixPQUFmLENBQWI7QUFDQSxLQUFNTyxjQUFjTCxRQUFRTSxZQUFSLENBQXNCSCxJQUF0QixFQUE2QkwsT0FBN0IsRUFBdUNDLEdBQXZDLENBQXBCO0FBQ0EsS0FBTVEsYUFBYVAsUUFBUVEsV0FBUixDQUFxQkwsSUFBckIsRUFBNEJFLFdBQTVCLENBQW5CO0FBQ0EsS0FBTUksY0FBY1QsUUFBUVUsWUFBUixDQUFzQlAsSUFBdEIsRUFBNkJMLE9BQTdCLENBQXBCO0FBQ0EsS0FBTWEsV0FBV1gsUUFBUVksU0FBUixDQUFtQlQsSUFBbkIsRUFBMEJGLEdBQTFCLENBQWpCO0FBQ0EsS0FBTVksVUFBVWIsUUFBUWMsUUFBUixDQUFrQmhCLE9BQWxCLEVBQTRCSyxJQUE1QixDQUFoQjtBQUNBLEtBQU1ZLGFBQWFmLFFBQVFnQixXQUFSLENBQXFCVCxVQUFyQixDQUFuQjs7QUFFQVAsU0FBUWlCLE1BQVIsR0FBaUJBLE1BQWpCOztBQUVBakIsU0FBUWtCLEtBQVIsR0FBZ0JBLEtBQWhCOztBQUVBbEIsU0FBUUMsR0FBUixHQUFjQSxHQUFkO0FBQ0FELFNBQVFtQixHQUFSLEdBQWNuQixRQUFRb0IsSUFBUixDQUFjbkIsR0FBZCxDQUFkOztBQUVBRCxTQUFRcUIsT0FBUixHQUFrQkEsT0FBbEI7O0FBRUFyQixTQUFRRyxJQUFSLEdBQWVBLElBQWY7QUFDQUgsU0FBUXNCLElBQVIsR0FBZXRCLFFBQVF1QixLQUFSLENBQWVwQixJQUFmLENBQWY7O0FBRUFILFNBQVFLLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0FMLFNBQVF3QixXQUFSLEdBQXNCeEIsUUFBUXlCLFlBQVIsQ0FBc0JwQixXQUF0QixDQUF0Qjs7QUFFQUwsU0FBUVMsV0FBUixHQUFzQkEsV0FBdEI7QUFDQVQsU0FBUTBCLFdBQVIsR0FBc0IxQixRQUFRMkIsWUFBUixDQUFzQmxCLFdBQXRCLENBQXRCOztBQUVBVCxTQUFRVyxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBWCxTQUFRNEIsUUFBUixHQUFtQjVCLFFBQVE2QixTQUFSLENBQW1CbEIsUUFBbkIsQ0FBbkI7O0FBRUFYLFNBQVFhLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0FiLFNBQVE4QixPQUFSLEdBQWtCOUIsUUFBUStCLFFBQVIsQ0FBa0JsQixPQUFsQixDQUFsQjtBQUNBYixTQUFRTyxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBUCxTQUFRZSxVQUFSLEdBQXFCQSxVQUFyQjs7QUFFQWYsU0FBUWdDLEtBQVIsR0FBZ0JoQyxRQUFRaUMsTUFBUixDQUFnQkMsY0FBaEIsRUFBaUNDLFlBQWpDLEVBQWdEQyxrQkFBaEQsRUFBcUVDLFVBQXJFLENBQWhCO0FBQ0FyQyxTQUFRc0MsS0FBUixHQUFnQkEsS0FBaEI7QUFDQXRDLFNBQVFrQyxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBbEMsU0FBUW1DLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0FuQyxTQUFRb0Msa0JBQVIsR0FBNkJBLGtCQUE3QjtBQUNBcEMsU0FBUXFDLFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBckMsU0FBUXVDLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0F2QyxTQUFRd0MsUUFBUixHQUFtQkEsUUFBbkI7QUFDQXhDLFNBQVF5QyxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0F6QyxTQUFRMEMsU0FBUixHQUFvQjFDLFFBQVEwQyxTQUE1QjtBQUNBMUMsU0FBUTJDLFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBLFFBQU8zQyxPQUFQO0FBRUEsQ0FwRE0iLCJmaWxlIjoiMDAzLWNvbXBpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCBjb21waWxlID0gZnVuY3Rpb24gKCBCYXNlU2V0ICwgQmFzZU1hcCAsIERMTCAsIGV4cG9ydHMgPSB7IH0gKSB7XG5cblx0Y29uc3QgU2V0ID0gZXhwb3J0cy5fU2V0KCBCYXNlU2V0ICkgO1xuXHRjb25zdCBEaWN0ID0gZXhwb3J0cy5fRGljdCggQmFzZU1hcCApIDtcblx0Y29uc3QgT3JkZXJlZERpY3QgPSBleHBvcnRzLl9PcmRlcmVkRGljdCggRGljdCAsIEJhc2VNYXAgLCBETEwgKSA7XG5cdGNvbnN0IE5hbWVkVHVwbGUgPSBleHBvcnRzLl9OYW1lZFR1cGxlKCBEaWN0ICwgT3JkZXJlZERpY3QgKSA7XG5cdGNvbnN0IERlZmF1bHREaWN0ID0gZXhwb3J0cy5fRGVmYXVsdERpY3QoIERpY3QgLCBCYXNlTWFwICkgO1xuXHRjb25zdCBDaGFpbk1hcCA9IGV4cG9ydHMuX0NoYWluTWFwKCBEaWN0ICwgU2V0ICkgO1xuXHRjb25zdCBDb3VudGVyID0gZXhwb3J0cy5fQ291bnRlciggQmFzZU1hcCAsIERpY3QgKSA7XG5cdGNvbnN0IG5hbWVkdHVwbGUgPSBleHBvcnRzLl9uYW1lZHR1cGxlKCBOYW1lZFR1cGxlICkgO1xuXG5cdGV4cG9ydHMuYmlzZWN0ID0gYmlzZWN0IDtcblxuXHRleHBvcnRzLmhlYXBxID0gaGVhcHEgO1xuXG5cdGV4cG9ydHMuU2V0ID0gU2V0IDtcblx0ZXhwb3J0cy5zZXQgPSBleHBvcnRzLl9zZXQoIFNldCApIDtcblxuXHRleHBvcnRzLk1hcHBpbmcgPSBNYXBwaW5nIDtcblxuXHRleHBvcnRzLkRpY3QgPSBEaWN0IDtcblx0ZXhwb3J0cy5kaWN0ID0gZXhwb3J0cy5fZGljdCggRGljdCApIDtcblxuXHRleHBvcnRzLk9yZGVyZWREaWN0ID0gT3JkZXJlZERpY3QgO1xuXHRleHBvcnRzLm9yZGVyZWRkaWN0ID0gZXhwb3J0cy5fb3JkZXJlZGRpY3QoIE9yZGVyZWREaWN0ICkgO1xuXG5cdGV4cG9ydHMuRGVmYXVsdERpY3QgPSBEZWZhdWx0RGljdCA7XG5cdGV4cG9ydHMuZGVmYXVsdGRpY3QgPSBleHBvcnRzLl9kZWZhdWx0ZGljdCggRGVmYXVsdERpY3QgKSA7XG5cblx0ZXhwb3J0cy5DaGFpbk1hcCA9IENoYWluTWFwIDtcblx0ZXhwb3J0cy5jaGFpbm1hcCA9IGV4cG9ydHMuX2NoYWlubWFwKCBDaGFpbk1hcCApIDtcblxuXHRleHBvcnRzLkNvdW50ZXIgPSBDb3VudGVyIDtcblx0ZXhwb3J0cy5jb3VudGVyID0gZXhwb3J0cy5fY291bnRlciggQ291bnRlciApIDtcblx0ZXhwb3J0cy5OYW1lZFR1cGxlID0gTmFtZWRUdXBsZSA7XG5cdGV4cG9ydHMubmFtZWR0dXBsZSA9IG5hbWVkdHVwbGUgO1xuXG5cdGV4cG9ydHMuZGVxdWUgPSBleHBvcnRzLl9kZXF1ZSggVW5ib3VuZGVkRGVxdWUgLCBCb3VuZGVkRGVxdWUgLCBTaW5nbGVFbGVtZW50RGVxdWUgLCBFbXB0eURlcXVlICkgO1xuXHRleHBvcnRzLkRlcXVlID0gRGVxdWUgO1xuXHRleHBvcnRzLlVuYm91bmRlZERlcXVlID0gVW5ib3VuZGVkRGVxdWUgO1xuXHRleHBvcnRzLkJvdW5kZWREZXF1ZSA9IEJvdW5kZWREZXF1ZSA7XG5cdGV4cG9ydHMuU2luZ2xlRWxlbWVudERlcXVlID0gU2luZ2xlRWxlbWVudERlcXVlIDtcblx0ZXhwb3J0cy5FbXB0eURlcXVlID0gRW1wdHlEZXF1ZSA7XG5cblx0ZXhwb3J0cy5JbmRleEVycm9yID0gSW5kZXhFcnJvciA7XG5cdGV4cG9ydHMuS2V5RXJyb3IgPSBLZXlFcnJvciA7XG5cdGV4cG9ydHMuTm90SW1wbGVtZW50ZWRFcnJvciA9IE5vdEltcGxlbWVudGVkRXJyb3IgO1xuXHRleHBvcnRzLlR5cGVFcnJvciA9IGV4cG9ydHMuVHlwZUVycm9yIDtcblx0ZXhwb3J0cy5WYWx1ZUVycm9yID0gVmFsdWVFcnJvciA7XG5cblx0cmV0dXJuIGV4cG9ydHMgO1xuXG59IDtcbiJdfQ==