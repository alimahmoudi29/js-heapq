"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var UnboundedDeque = exports.UnboundedDeque = function UnboundedDeque(iterable) {

	this.growth = 2;

	this.minsize = 10;

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

UnboundedDeque.prototype = new ArbitrarySizeDeque();

UnboundedDeque.prototype._copy = function (container) {

	var len = this.length;

	for (var i = 0; i < len; ++i) {
		container[i] = this.get(i);
	}
};

UnboundedDeque.prototype._realloc = function (newsize) {

	var container = new Array(newsize);

	this._copy(container);

	this.container = container;

	this.center = 0;

	this.currentsize = newsize;
};

UnboundedDeque.prototype._shrink = function () {

	var newsize = Math.max(this.minsize, this.length * this.growth);

	if (newsize * this.growth >= this.currentsize) return;

	this._realloc(newsize);
};

UnboundedDeque.prototype._grow = function (newlen) {

	if (newlen <= this.currentsize) return;

	this._realloc(newlen * this.growth);
};

UnboundedDeque.prototype.len = function () {

	return this.length;
};

UnboundedDeque.prototype.capacity = function () {

	return this.currentsize;
};

UnboundedDeque.prototype.append = function (x) {

	this._grow(this.length + 1);

	var i = (this.center + this.length) % this.currentsize;
	this.container[i] = x;
	++this.length;

	return this;
};

UnboundedDeque.prototype.appendleft = function (x) {

	this._grow(this.length + 1);

	--this.center;
	this.center += this.currentsize;
	this.center %= this.currentsize;
	this.container[this.center] = x;

	++this.length;

	return this;
};

UnboundedDeque.prototype.clear = function () {

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	return this;
};

UnboundedDeque.prototype.copy = function () {

	return new UnboundedDeque(this);
};

UnboundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.currentsize];
};

UnboundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	container[index] = 0;

	--this.length;

	this._shrink();

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9EZXF1ZS9VbmJvdW5kZWREZXF1ZS5qcyJdLCJuYW1lcyI6WyJVbmJvdW5kZWREZXF1ZSIsIml0ZXJhYmxlIiwiZ3Jvd3RoIiwibWluc2l6ZSIsImN1cnJlbnRzaXplIiwiY29udGFpbmVyIiwiQXJyYXkiLCJjZW50ZXIiLCJsZW5ndGgiLCJleHRlbmQiLCJwcm90b3R5cGUiLCJBcmJpdHJhcnlTaXplRGVxdWUiLCJfY29weSIsImxlbiIsImkiLCJnZXQiLCJfcmVhbGxvYyIsIm5ld3NpemUiLCJfc2hyaW5rIiwiTWF0aCIsIm1heCIsIl9ncm93IiwibmV3bGVuIiwiY2FwYWNpdHkiLCJhcHBlbmQiLCJ4IiwiYXBwZW5kbGVmdCIsImNsZWFyIiwiY29weSIsIl93aGVyZSIsIl9jaGVja2JvdW5kcyIsIl9wb3BpbmRleCIsImluZGV4IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ08sSUFBTUEsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFXQyxRQUFYLEVBQXNCOztBQUVuRCxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxPQUFMLEdBQWUsRUFBZjs7QUFFQSxNQUFLQyxXQUFMLEdBQWtCLEtBQUtELE9BQXZCOztBQUVBLE1BQUtFLFNBQUwsR0FBaUIsSUFBSUMsS0FBSixDQUFXLEtBQUtGLFdBQWhCLENBQWpCOztBQUVBLE1BQUtHLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLEtBQUtQLGFBQWEsSUFBbEIsRUFBeUIsS0FBS1EsTUFBTCxDQUFhUixRQUFiO0FBR3pCLENBakJNOztBQW1CUEQsZUFBZVUsU0FBZixHQUEyQixJQUFJQyxrQkFBSixFQUEzQjs7QUFFQVgsZUFBZVUsU0FBZixDQUF5QkUsS0FBekIsR0FBaUMsVUFBV1AsU0FBWCxFQUF1Qjs7QUFFdkQsS0FBTVEsTUFBTSxLQUFLTCxNQUFqQjs7QUFFQSxNQUFNLElBQUlNLElBQUksQ0FBZCxFQUFrQkEs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QUFtQixDQUFFLEtBQUtFLE1BQUwsR0FBY08sQ0FBaEIsSUFBc0IsS0FBS1YsV0FBOUMsQ0FBUDtBQUVBLENBTkQ7O0FBU0FKLGVBQWVVLFNBQWYsQ0FBeUJxQixTQUF6QixHQUFxQyxVQUFXMUIsU0FBWCxFQUF1QjJCLEtBQXZCLEVBQStCOztBQUVuRSxLQUFNQyxRQUFRNUIsVUFBVTJCLEtBQVYsQ0FBZDs7QUFFQTtBQUNBM0IsV0FBVTJCLEtBQVYsSUFBbUIsQ0FBbkI7O0FBRUEsR0FBRSxLQUFLeEIsTUFBUDs7QUFFQSxNQUFLVSxPQUFMOztBQUVBLFFBQU9lLEtBQVA7QUFFQSxDQWJEIiwiZmlsZSI6IlVuYm91bmRlZERlcXVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY29uc3QgVW5ib3VuZGVkRGVxdWUgPSBmdW5jdGlvbiAoIGl0ZXJhYmxlICkge1xuXG5cdHRoaXMuZ3Jvd3RoID0gMiA7XG5cblx0dGhpcy5taW5zaXplID0gMTAgO1xuXG5cdHRoaXMuY3VycmVudHNpemU9IHRoaXMubWluc2l6ZSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMuY3VycmVudHNpemUpIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0aWYgKCBpdGVyYWJsZSAhPT0gbnVsbCApIHRoaXMuZXh0ZW5kKCBpdGVyYWJsZSApIDtcblxuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlID0gbmV3IEFyYml0cmFyeVNpemVEZXF1ZSggKSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fY29weSA9IGZ1bmN0aW9uICggY29udGFpbmVyICkge1xuXG5cdGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoIDtcblxuXHRmb3IgKCBsZXQgaSA9IDAgOyBpIDwgbGVuIDsgKytpICkgY29udGFpbmVyW2ldID0gdGhpcy5nZXQoIGkgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3JlYWxsb2MgPSBmdW5jdGlvbiAoIG5ld3NpemUgKSB7XG5cblx0Y29uc3QgY29udGFpbmVyID0gbmV3IEFycmF5KCBuZXdzaXplICkgO1xuXG5cdHRoaXMuX2NvcHkoIGNvbnRhaW5lciApIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lciA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmN1cnJlbnRzaXplID0gbmV3c2l6ZSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fc2hyaW5rID0gZnVuY3Rpb24gKCApIHtcblxuXHRjb25zdCBuZXdzaXplID0gTWF0aC5tYXgoIHRoaXMubWluc2l6ZSAsIHRoaXMubGVuZ3RoICogdGhpcy5ncm93dGggKSA7XG5cblx0aWYgKCBuZXdzaXplICogdGhpcy5ncm93dGggPj0gdGhpcy5jdXJyZW50c2l6ZSApIHJldHVybiA7XG5cblx0dGhpcy5fcmVhbGxvYyggbmV3c2l6ZSApIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fZ3JvdyA9IGZ1bmN0aW9uICggbmV3bGVuICkge1xuXG5cdGlmICggbmV3bGVuIDw9IHRoaXMuY3VycmVudHNpemUgKSByZXR1cm4gO1xuXG5cdHRoaXMuX3JlYWxsb2MoIG5ld2xlbiAqIHRoaXMuZ3Jvd3RoICkgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUubGVuID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5sZW5ndGggO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5jdXJyZW50c2l6ZSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0dGhpcy5fZ3JvdyggdGhpcy5sZW5ndGggKyAxICkgO1xuXG5cdGNvbnN0IGkgPSAoIHRoaXMuY2VudGVyICsgdGhpcy5sZW5ndGggKSAlIHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY29udGFpbmVyW2ldID0geCA7XG5cdCsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmRsZWZ0ID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdHRoaXMuX2dyb3coIHRoaXMubGVuZ3RoICsgMSApIDtcblxuXHQtLXRoaXMuY2VudGVyIDtcblx0dGhpcy5jZW50ZXIgKz0gdGhpcy5jdXJyZW50c2l6ZTtcblx0dGhpcy5jZW50ZXIgJT0gdGhpcy5jdXJyZW50c2l6ZTtcblx0dGhpcy5jb250YWluZXJbdGhpcy5jZW50ZXJdID0geCA7XG5cblx0Kyt0aGlzLmxlbmd0aCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCApIHtcblxuXHR0aGlzLmN1cnJlbnRzaXplPSB0aGlzLm1pbnNpemUgO1xuXG5cdHRoaXMuY29udGFpbmVyID0gbmV3IEFycmF5KCB0aGlzLmN1cnJlbnRzaXplKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gbmV3IFVuYm91bmRlZERlcXVlKCB0aGlzICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl93aGVyZSA9IGZ1bmN0aW9uICggaSApIHtcblxuXHR0aGlzLl9jaGVja2JvdW5kcyggaSApIDtcblxuXHRyZXR1cm4gWyB0aGlzLmNvbnRhaW5lciAsICggdGhpcy5jZW50ZXIgKyBpICkgJSB0aGlzLmN1cnJlbnRzaXplXSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fcG9waW5kZXggPSBmdW5jdGlvbiAoIGNvbnRhaW5lciAsIGluZGV4ICkge1xuXG5cdGNvbnN0IHZhbHVlID0gY29udGFpbmVyW2luZGV4XSA7XG5cblx0Ly8gR0Ncblx0Y29udGFpbmVyW2luZGV4XSA9IDAgO1xuXG5cdC0tdGhpcy5sZW5ndGggO1xuXG5cdHRoaXMuX3NocmluayggKSA7XG5cblx0cmV0dXJuIHZhbHVlIDtcblxufSA7XG4iXX0=