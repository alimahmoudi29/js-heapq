'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.BoundedDeque = undefined;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BoundedDeque = exports.BoundedDeque = function BoundedDeque(iterable, maxlen) {

	this.maxlen = maxlen;

	this.container = new Array(maxlen);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

BoundedDeque.prototype = new _ArbitrarySizeDeque2.default();

BoundedDeque.prototype.len = function () {

	return this.length;
};

BoundedDeque.prototype.capacity = function () {

	return this.maxlen;
};

BoundedDeque.prototype.append = function (x) {

	if (this.length === this.maxlen) {

		this.container[this.center] = x;
		++this.center;
		this.center %= this.maxlen;
	} else {

		var i = (this.center + this.length) % this.maxlen;
		this.container[i] = x;
		++this.length;
	}

	return this;
};

BoundedDeque.prototype.appendleft = function (x) {

	--this.center;
	this.center += this.maxlen;
	this.center %= this.maxlen;
	this.container[this.center] = x;

	if (this.length < this.maxlen) ++this.length;

	return this;
};

BoundedDeque.prototype.clear = function () {

	this.center = 0;

	this.length = 0;

	this.container = new Array(this.maxlen);

	return this;
};

BoundedDeque.prototype.copy = function () {

	return new BoundedDeque(this, this.maxlen);
};

BoundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.maxlen];
};

BoundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9jb3JlL0JvdW5kZWREZXF1ZS5qcyJdLCJuYW1lcyI6WyJCb3VuZGVkRGVxdWUiLCJpdGVyYWJsZSIsIm1heGxlbiIsImNvbnRhaW5lciIsIkFycmF5IiwiY2VudGVyIiwibGVuZ3RoIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwibGVuIiwiY2FwYWNpdHkiLCJhcHBlbmQiLCJ4IiwiaSIsImFwcGVuZGxlZnQiLCJjbGVhciIsImNvcHkiLCJfd2hlcmUiLCJfY2hlY2tib3VuZHMiLCJfcG9waW5kZXgiLCJpbmRleCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQUVPLElBQU1BLHNDQUFlLFNBQWZBLFlBQWUsQ0FBV0MsUUFBWCxFQUFzQkMsTUFBdEIsRUFBK0I7O0FBRTFELE1BQUtBLE1BQUwsR0FBY0EsTUFBZDs7QUFFQSxNQUFLQyxTQUFMLEdBQWlCLElBQUlDLEtBQUosQ0FBV0YsTUFBWCxDQUFqQjs7QUFFQSxNQUFLRyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxLQUFLTCxhQUFhLElBQWxCLEVBQXlCLEtBQUtNLE1BQUwsQ0FBYU4sUUFBYjtBQUd6QixDQWJNOztBQWVQRCxhQUFhUSxTQUFiLEdBQXlCLGtDQUF6Qjs7QUFFQVIsYUFBYVEsU0FBYixDQUF1QkMsR0FBdkIsR0FBNkIsWUFBYTs7QUFFekMsUUFBTyxLQUFLSCxNQUFaO0FBRUEsQ0FKRDs7QUFNQU4sYUFBYVEsU0FBYixDQUF1QkUsUUFBdkIsR0FBa0MsWUFBYTs7QUFFOUMsUUFBTyxLQUFLUixNQUFaO0FBRUEsQ0FKRDs7QUFNQUYsYUFBYVEsU0FBYixDQUF1QkcsTUFBdkIsR0FBZ0MsVUFBV0MsQ0FBWCxFQUFlOztBQUc5QyxLQUFLLEtBQUtOLE1BQUwsS0FBZ0IsS0FBS0osTUFBMUIsRUFBbUM7O0FBRWxDLE9BQUtDLFNBQUwsQ0FBZSxLQUFLRSxNQUFwQixJQUE4Qk8sQ0FBOUI7QUFDQSxJQUFFLEtBQUtQLE1BQVA7QUFDQSxPQUFLQSxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFFQSxFQU5ELE1BUUs7O0FBRUosTUFBTVcsSUFBSSxDQUFFLEtBQUtSLE1BQUwsR0FBYyxLQUFLQyxNQUFyQixJQUFnQyxLQUFLSixNQUEvQztBQUNBLE9BQUtDLFNBQUwsQ0FBZVUsQ0FBZixJQUFvQkQsQ0FBcEI7QUFDQSxJQUFFLEtBQUtOLE1BQVA7QUFFQTs7QUFFRCxRQUFPLElBQVA7QUFFQSxDQXJCRDs7QUF1QkFOLGFBQWFRLFNBQWIsQ0FBdUJNLFVBQXZCLEdBQW9DLFVBQVdGLENBQVgsRUFBZTs7QUFFbEQsR0FBRSxLQUFLUCxNQUFQO0FBQ0EsTUFBS0EsTUFBTCxJQUFlLEtBQUtILE1BQXBCO0FBQ0EsTUFBS0csTUFBTCxJQUFlLEtBQUtILE1BQXBCO0FBQ0EsTUFBS0MsU0FBTCxDQUFlLEtBQUtFLE1BQXBCLElBQThCTyxDQUE5Qjs7QUFFQSxLQUFLLEtBQUtOLE1BQUwsR0FBYyxLQUFLSixNQUF4QixFQUFpQyxFQUFFLEtBQUtJLE1BQVA7O0FBRWpDLFFBQU8sSUFBUDtBQUVBLENBWEQ7O0FBYUFOLGFBQWFRLFNBQWIsQ0FBdUJPLEtBQXZCLEdBQStCLFlBQWE7O0FBRTNDLE1BQUtWLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtILFNBQUwsR0FBaUIsSUFBSUMsS0FBSixDQUFXLEtBQUtGLE1BQWhCLENBQWpCOztBQUVBLFFBQU8sSUFBUDtBQUVBLENBVkQ7O0FBWUFGLGFBQWFRLFNBQWIsQ0FBdUJRLElBQXZCLEdBQThCLFlBQWE7O0FBRTFDLFFBQU8sSUFBSWhCLFlBQUosQ0FBa0IsSUFBbEIsRUFBeUIsS0FBS0UsTUFBOUIsQ0FBUDtBQUVBLENBSkQ7O0FBUUFGLGFBQWFRLFNBQWIsQ0FBdUJTLE1BQXZCLEdBQWdDLFVBQVdKLENBQVgsRUFBZTs7QUFFOUMsTUFBS0ssWUFBTCxDQUFtQkwsQ0FBbkI7O0FBRUEsUUFBTyxDQUFFLEtBQUtWLFNBQVAsRUFBbUIsQ0FBRSxLQUFLRSxNQUFMLEdBQWNRLENBQWhCLElBQXNCLEtBQUtYLE1BQTlDLENBQVA7QUFFQSxDQU5EOztBQVNBRixhQUFhUSxTQUFiLENBQXVCVyxTQUF2QixHQUFtQyxVQUFXaEIsU0FBWCxFQUF1QmlCLEtBQXZCLEVBQStCOztBQUVqRSxLQUFNQyxRQUFRbEIsVUFBVWlCLEtBQVYsQ0FBZDs7QUFFQTtBQUNBO0FBQ0FqQixXQUFVaUIsS0FBVixJQUFtQixDQUFuQjs7QUFFQSxHQUFFLEtBQUtkLE1BQVA7O0FBRUEsUUFBT2UsS0FBUDtBQUVBLENBWkQiLCJmaWxlIjoiQm91bmRlZERlcXVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFyYml0cmFyeVNpemVEZXF1ZSBmcm9tICcuL0FyYml0cmFyeVNpemVEZXF1ZScgO1xuXG5leHBvcnQgY29uc3QgQm91bmRlZERlcXVlID0gZnVuY3Rpb24gKCBpdGVyYWJsZSAsIG1heGxlbiApIHtcblxuXHR0aGlzLm1heGxlbiA9IG1heGxlbiA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIG1heGxlbiApIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0aWYgKCBpdGVyYWJsZSAhPT0gbnVsbCApIHRoaXMuZXh0ZW5kKCBpdGVyYWJsZSApIDtcblxuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZSA9IG5ldyBBcmJpdHJhcnlTaXplRGVxdWUoICkgO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubGVuZ3RoIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2FwYWNpdHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLm1heGxlbiA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICggeCApIHtcblxuXG5cdGlmICggdGhpcy5sZW5ndGggPT09IHRoaXMubWF4bGVuICkge1xuXG5cdFx0dGhpcy5jb250YWluZXJbdGhpcy5jZW50ZXJdID0geCA7XG5cdFx0Kyt0aGlzLmNlbnRlciA7XG5cdFx0dGhpcy5jZW50ZXIgJT0gdGhpcy5tYXhsZW4gO1xuXG5cdH1cblxuXHRlbHNlIHtcblxuXHRcdGNvbnN0IGkgPSAoIHRoaXMuY2VudGVyICsgdGhpcy5sZW5ndGggKSAlIHRoaXMubWF4bGVuIDtcblx0XHR0aGlzLmNvbnRhaW5lcltpXSA9IHggO1xuXHRcdCsrdGhpcy5sZW5ndGggO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZGxlZnQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0LS10aGlzLmNlbnRlciA7XG5cdHRoaXMuY2VudGVyICs9IHRoaXMubWF4bGVuIDtcblx0dGhpcy5jZW50ZXIgJT0gdGhpcy5tYXhsZW4gO1xuXHR0aGlzLmNvbnRhaW5lclt0aGlzLmNlbnRlcl0gPSB4IDtcblxuXHRpZiAoIHRoaXMubGVuZ3RoIDwgdGhpcy5tYXhsZW4gKSArK3RoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCApIHtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMubWF4bGVuICkgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIG5ldyBCb3VuZGVkRGVxdWUoIHRoaXMgLCB0aGlzLm1heGxlbiApIDtcblxufSA7XG5cblxuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLl93aGVyZSA9IGZ1bmN0aW9uICggaSApIHtcblxuXHR0aGlzLl9jaGVja2JvdW5kcyggaSApIDtcblxuXHRyZXR1cm4gWyB0aGlzLmNvbnRhaW5lciAsICggdGhpcy5jZW50ZXIgKyBpICkgJSB0aGlzLm1heGxlbiBdIDtcblxufSA7XG5cblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5fcG9waW5kZXggPSBmdW5jdGlvbiAoIGNvbnRhaW5lciAsIGluZGV4ICkge1xuXG5cdGNvbnN0IHZhbHVlID0gY29udGFpbmVyW2luZGV4XSA7XG5cblx0Ly8gR0Ncblx0Ly8gVE9ETyB1c2UgbnVsbCBpbnN0ZWFkIG9mIDAgZm9yIG5vbi1OdW1iZXIgZGVxdWVzXG5cdGNvbnRhaW5lcltpbmRleF0gPSAwIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdmFsdWUgO1xuXG59IDtcbiJdfQ==