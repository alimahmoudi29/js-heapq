"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var BoundedDeque = exports.BoundedDeque = function BoundedDeque(iterable, maxlen) {

	this.maxlen = maxlen;

	this.container = new Array(maxlen);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

BoundedDeque.prototype = new ArbitrarySizeDeque();

BoundedDeque.prototype.len = function () {

	return this.length;
};

BoundedDeque.prototype.capacity = function () {

	return this.maxlen;
};

BoundedDeque.prototype.append = function (x) {

	if (this.length === this.maxlen) {

		this.container[this.center] = x;
		++this.center;
		this.center %= this.maxlen;
	} else {

		var i = (this.center + this.length) % this.maxlen;
		this.container[i] = x;
		++this.length;
	}

	return this;
};

BoundedDeque.prototype.appendleft = function (x) {

	--this.center;
	this.center += this.maxlen;
	this.center %= this.maxlen;
	this.container[this.center] = x;

	if (this.length < this.maxlen) ++this.length;

	return this;
};

BoundedDeque.prototype.clear = function () {

	this.center = 0;

	this.length = 0;

	this.container = new Array(this.maxlen);

	return this;
};

BoundedDeque.prototype.copy = function () {

	return new BoundedDeque(this, this.maxlen);
};

BoundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.maxlen];
};

BoundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	container[index] = 0;

	--this.length;

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9EZXF1ZS9Cb3VuZGVkRGVxdWUuanMiXSwibmFtZXMiOlsiQm91bmRlZERlcXVlIiwiaXRlcmFibGUiLCJtYXhsZW4iLCJjb250YWluZXIiLCJBcnJheSIsImNlbnRlciIsImxlbmd0aCIsImV4dGVuZCIsInByb3RvdHlwZSIsIkFyYml0cmFyeVNpemVEZXF1ZSIsImxlbiIsImNhcGFjaXR5IiwiYXBwZW5kIiwieCIsImkiLCJhcHBlbmRsZWZ0IiwiY2xlYXIiLCJjb3B5IiwiX3doZXJlIiwiX2NoZWNrYm91bmRzIiwiX3BvcGluZGV4IiwiaW5kZXgiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDTyxJQUFNQSxzQ0FBZSxTQUFmQSxZQUFlLENBQVdDLFFBQVgsRUFBc0JDLE1BQXRCLEVBQStCOztBQUUxRCxNQUFLQSxNQUFMLEdBQWNBLE1BQWQ7O0FBRUEsTUFBS0MsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVdGLE1BQVgsQ0FBakI7O0FBRUEsTUFBS0csTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsS0FBS0wsYUFBYSxJQUFsQixFQUF5QixLQUFLTSxNQUFMLENBQWFOLFFBQWI7QUFHekIsQ0FiTTs7QUFlUEQsYUFBYVEsU0FBYixHQUF5QixJQUFJQyxrQkFBSixFQUF6Qjs7QUFFQVQsYUFBYVEsU0FBYixDQUF1QkUsR0FBdkIsR0FBNkIsWUFBYTs7QUFFekMsUUFBTyxLQUFLSixNQUFaO0FBRUEsQ0FKRDs7QUFNQU4sYUFBYVEsU0FBYixDQUF1QkcsUUFBdkIsR0FBa0MsWUFBYTs7QUFFOUMsUUFBTyxLQUFLVCxNQUFaO0FBRUEsQ0FKRDs7QUFNQUYsYUFBYVEsU0FBYixDQUF1QkksTUFBdkIsR0FBZ0MsVUFBV0MsQ0FBWCxFQUFlOztBQUc5QyxLQUFLLEtBQUtQLE1BQUwsS0FBZ0IsS0FBS0osTUFBMUIsRUFBbUM7O0FBRWxDLE9BQUtDLFNBQUwsQ0FBZSxLQUFLRSxNQUFwQixJQUE4QlEsQ0FBOUI7QUFDQSxJQUFFLEtBQUtSLE1BQVA7QUFDQSxPQUFLQSxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFFQSxFQU5ELE1BUUs7O0FBRUosTUFBTVksSUFBSSxDQUFFLEtBQUtULE1BQUwsR0FBYyxLQUFLQyxNQUFyQixJQUFnQyxLQUFLSixNQUEvQztBQUNBLE9BQUtDLFNBQUwsQ0FBZVcsQ0FBZixJQUFvQkQsQ0FBcEI7QUFDQSxJQUFFLEtBQUtQLE1BQVA7QUFFQTs7QUFFRCxRQUFPLElBQVA7QUFFQSxDQXJCRDs7QUF1QkFOLGFBQWFRLFNBQWIsQ0FBdUJPLFVBQXZCLEdBQW9DLFVBQVdGLENBQVgsRUFBZTs7QUFFbEQsR0FBRSxLQUFLUixNQUFQO0FBQ0EsTUFBS0EsTUFBTCxJQUFlLEtBQUtILE1BQXBCO0FBQ0EsTUFBS0csTUFBTCxJQUFlLEtBQUtILE1BQXBCO0FBQ0EsTUFBS0MsU0FBTCxDQUFlLEtBQUtFLE1BQXBCLElBQThCUSxDQUE5Qjs7QUFFQSxLQUFLLEtBQUtQLE1BQUwsR0FBYyxLQUFLSixNQUF4QixFQUFpQyxFQUFFLEtBQUtJLE1BQVA7O0FBRWpDLFFBQU8sSUFBUDtBQUVBLENBWEQ7O0FBYUFOLGFBQWFRLFNBQWIsQ0FBdUJRLEtBQXZCLEdBQStCLFlBQWE7O0FBRTNDLE1BQUtYLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtILFNBQUwsR0FBaUIsSUFBSUMsS0FBSixDQUFXLEtBQUtGLE1BQWhCLENBQWpCOztBQUVBLFFBQU8sSUFBUDtBQUVBLENBVkQ7O0FBWUFGLGFBQWFRLFNBQWIsQ0FBdUJTLElBQXZCLEdBQThCLFlBQWE7O0FBRTFDLFFBQU8sSUFBSWpCLFlBQUosQ0FBa0IsSUFBbEIsRUFBeUIsS0FBS0UsTUFBOUIsQ0FBUDtBQUVBLENBSkQ7O0FBUUFGLGFBQWFRLFNBQWIsQ0FBdUJVLE1BQXZCLEdBQWdDLFVBQVdKLENBQVgsRUFBZTs7QUFFOUMsTUFBS0ssWUFBTCxDQUFtQkwsQ0FBbkI7O0FBRUEsUUFBTyxDQUFFLEtBQUtYLFNBQVAsRUFBbUIsQ0FBRSxLQUFLRSxNQUFMLEdBQWNTLENBQWhCLElBQXNCLEtBQUtaLE1BQTlDLENBQVA7QUFFQSxDQU5EOztBQVNBRixhQUFhUSxTQUFiLENBQXVCWSxTQUF2QixHQUFtQyxVQUFXakIsU0FBWCxFQUF1QmtCLEtBQXZCLEVBQStCOztBQUVqRSxLQUFNQyxRQUFRbkIsVUFBVWtCLEtBQVYsQ0FBZDs7QUFFQTtBQUNBbEIsV0FBVWtCLEtBQVYsSUFBbUIsQ0FBbkI7O0FBRUEsR0FBRSxLQUFLZixNQUFQOztBQUVBLFFBQU9nQixLQUFQO0FBRUEsQ0FYRCIsImZpbGUiOiJCb3VuZGVkRGVxdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCBCb3VuZGVkRGVxdWUgPSBmdW5jdGlvbiAoIGl0ZXJhYmxlICwgbWF4bGVuICkge1xuXG5cdHRoaXMubWF4bGVuID0gbWF4bGVuIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggbWF4bGVuICkgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHRpZiAoIGl0ZXJhYmxlICE9PSBudWxsICkgdGhpcy5leHRlbmQoIGl0ZXJhYmxlICkgO1xuXG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlID0gbmV3IEFyYml0cmFyeVNpemVEZXF1ZSggKSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUubGVuID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5sZW5ndGggO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubWF4bGVuIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cblx0aWYgKCB0aGlzLmxlbmd0aCA9PT0gdGhpcy5tYXhsZW4gKSB7XG5cblx0XHR0aGlzLmNvbnRhaW5lclt0aGlzLmNlbnRlcl0gPSB4IDtcblx0XHQrK3RoaXMuY2VudGVyIDtcblx0XHR0aGlzLmNlbnRlciAlPSB0aGlzLm1heGxlbiA7XG5cblx0fVxuXG5cdGVsc2Uge1xuXG5cdFx0Y29uc3QgaSA9ICggdGhpcy5jZW50ZXIgKyB0aGlzLmxlbmd0aCApICUgdGhpcy5tYXhsZW4gO1xuXHRcdHRoaXMuY29udGFpbmVyW2ldID0geCA7XG5cdFx0Kyt0aGlzLmxlbmd0aCA7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kbGVmdCA9IGZ1bmN0aW9uICggeCApIHtcblxuXHQtLXRoaXMuY2VudGVyIDtcblx0dGhpcy5jZW50ZXIgKz0gdGhpcy5tYXhsZW4gO1xuXHR0aGlzLmNlbnRlciAlPSB0aGlzLm1heGxlbiA7XG5cdHRoaXMuY29udGFpbmVyW3RoaXMuY2VudGVyXSA9IHggO1xuXG5cdGlmICggdGhpcy5sZW5ndGggPCB0aGlzLm1heGxlbiApICsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoICkge1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggdGhpcy5tYXhsZW4gKSA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gbmV3IEJvdW5kZWREZXF1ZSggdGhpcyAsIHRoaXMubWF4bGVuICkgO1xuXG59IDtcblxuXG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3doZXJlID0gZnVuY3Rpb24gKCBpICkge1xuXG5cdHRoaXMuX2NoZWNrYm91bmRzKCBpICkgO1xuXG5cdHJldHVybiBbIHRoaXMuY29udGFpbmVyICwgKCB0aGlzLmNlbnRlciArIGkgKSAlIHRoaXMubWF4bGVuIF0gO1xuXG59IDtcblxuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLl9wb3BpbmRleCA9IGZ1bmN0aW9uICggY29udGFpbmVyICwgaW5kZXggKSB7XG5cblx0Y29uc3QgdmFsdWUgPSBjb250YWluZXJbaW5kZXhdIDtcblxuXHQvLyBHQ1xuXHRjb250YWluZXJbaW5kZXhdID0gMCA7XG5cblx0LS10aGlzLmxlbmd0aCA7XG5cblx0cmV0dXJuIHZhbHVlIDtcblxufSA7XG4iXX0=