"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;
function compile(BaseSet, BaseMap, DoublyLinkedList, core) {

	var Set = core.set._Set(BaseSet);
	var Dict = core.dict.dict._Dict(BaseMap);
	var OrderedDict = core.dict.ordereddict._OrderedDict(Dict, BaseMap, DoublyLinkedList);
	var NamedTuple = core.namedtuple._NamedTuple(Dict, OrderedDict);
	var DefaultDict = core.dict.defaultdict._DefaultDict(Dict, BaseMap);
	var ChainMap = core.chainmap._ChainMap(Dict, Set);
	var Counter = core.counter._Counter(BaseMap, Dict);
	var namedtuple = core.namedtuple._namedtuple(NamedTuple);

	var all = {};

	all.bisect = core.bisect;

	all.heapq = core.heapq;

	all.Set = Set;
	all.set = core.set._set(Set);

	all.Mapping = core.mapping;

	all.Dict = Dict;
	all.dict = core.dict.dict_dict(Dict);
	all.OrderedDict = OrderedDict;
	all.ordereddict = core.dict.ordereddict._ordereddict(OrderedDict);
	all.DefaultDict = DefaultDict;
	all.defaultdict = core.dict.defaultdict._defaultdict(DefaultDict);

	all.ChainMap = ChainMap;
	all.chainmap = core.chainmap._chainmap(ChainMap);

	all.Counter = Counter;
	all.counter = core.counter._counter(Counter);

	all.NamedTuple = NamedTuple;
	all.namedtuple = namedtuple;

	all.deque = core.deque._deque(UnboundedDeque, BoundedDeque, SingleElementDeque, EmptyDeque);
	all.Deque = Deque;
	all.UnboundedDeque = UnboundedDeque;
	all.BoundedDeque = BoundedDeque;
	all.SingleElementDeque = SingleElementDeque;
	all.EmptyDeque = EmptyDeque;

	all.IndexError = IndexError;
	all.KeyError = KeyError;
	all.NotImplementedError = NotImplementedError;
	all.TypeError = TypeError;
	all.ValueError = ValueError;

	return all;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLmpzIl0sIm5hbWVzIjpbImNvbXBpbGUiLCJCYXNlU2V0IiwiQmFzZU1hcCIsIkRvdWJseUxpbmtlZExpc3QiLCJjb3JlIiwiU2V0Iiwic2V0IiwiX1NldCIsIkRpY3QiLCJkaWN0IiwiX0RpY3QiLCJPcmRlcmVkRGljdCIsIm9yZGVyZWRkaWN0IiwiX09yZGVyZWREaWN0IiwiTmFtZWRUdXBsZSIsIm5hbWVkdHVwbGUiLCJfTmFtZWRUdXBsZSIsIkRlZmF1bHREaWN0IiwiZGVmYXVsdGRpY3QiLCJfRGVmYXVsdERpY3QiLCJDaGFpbk1hcCIsImNoYWlubWFwIiwiX0NoYWluTWFwIiwiQ291bnRlciIsImNvdW50ZXIiLCJfQ291bnRlciIsIl9uYW1lZHR1cGxlIiwiYWxsIiwiYmlzZWN0IiwiaGVhcHEiLCJfc2V0IiwiTWFwcGluZyIsIm1hcHBpbmciLCJkaWN0X2RpY3QiLCJfb3JkZXJlZGRpY3QiLCJfZGVmYXVsdGRpY3QiLCJfY2hhaW5tYXAiLCJfY291bnRlciIsImRlcXVlIiwiX2RlcXVlIiwiVW5ib3VuZGVkRGVxdWUiLCJCb3VuZGVkRGVxdWUiLCJTaW5nbGVFbGVtZW50RGVxdWUiLCJFbXB0eURlcXVlIiwiRGVxdWUiLCJJbmRleEVycm9yIiwiS2V5RXJyb3IiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiVHlwZUVycm9yIiwiVmFsdWVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQ3dCQSxPO0FBQVQsU0FBU0EsT0FBVCxDQUFtQkMsT0FBbkIsRUFBNkJDLE9BQTdCLEVBQXVDQyxnQkFBdkMsRUFBMERDLElBQTFELEVBQWlFOztBQUUvRSxLQUFNQyxNQUFNRCxLQUFLRSxHQUFMLENBQVNDLElBQVQsQ0FBZU4sT0FBZixDQUFaO0FBQ0EsS0FBTU8sT0FBT0osS0FBS0ssSUFBTCxDQUFVQSxJQUFWLENBQWVDLEtBQWYsQ0FBc0JSLE9BQXRCLENBQWI7QUFDQSxLQUFNUyxjQUFjUCxLQUFLSyxJQUFMLENBQVVHLFdBQVYsQ0FBc0JDLFlBQXRCLENBQW9DTCxJQUFwQyxFQUEyQ04sT0FBM0MsRUFBcURDLGdCQUFyRCxDQUFwQjtBQUNBLEtBQU1XLGFBQWFWLEtBQUtXLFVBQUwsQ0FBZ0JDLFdBQWhCLENBQTZCUixJQUE3QixFQUFvQ0csV0FBcEMsQ0FBbkI7QUFDQSxLQUFNTSxjQUFjYixLQUFLSyxJQUFMLENBQVVTLFdBQVYsQ0FBc0JDLFlBQXRCLENBQW9DWCxJQUFwQyxFQUEyQ04sT0FBM0MsQ0FBcEI7QUFDQSxLQUFNa0IsV0FBV2hCLEtBQUtpQixRQUFMLENBQWNDLFNBQWQsQ0FBeUJkLElBQXpCLEVBQWdDSCxHQUFoQyxDQUFqQjtBQUNBLEtBQU1rQixVQUFVbkIsS0FBS29CLE9BQUwsQ0FBYUMsUUFBYixDQUF1QnZCLE9BQXZCLEVBQWlDTSxJQUFqQyxDQUFoQjtBQUNBLEtBQU1PLGFBQWFYLEtBQUtXLFVBQUwsQ0FBZ0JXLFdBQWhCLENBQTZCWixVQUE3QixDQUFuQjs7QUFFQSxLQUFNYSxNQUFNLEVBQVo7O0FBRUFBLEtBQUlDLE1BQUosR0FBYXhCLEtBQUt3QixNQUFsQjs7QUFFQUQsS0FBSUUsS0FBSixHQUFZekIsS0FBS3lCLEtBQWpCOztBQUVBRixLQUFJdEIsR0FBSixHQUFVQSxHQUFWO0FBQ0FzQixLQUFJckIsR0FBSixHQUFVRixLQUFLRSxHQUFMLENBQVN3QixJQUFULENBQWV6QixHQUFmLENBQVY7O0FBRUFzQixLQUFJSSxPQUFKLEdBQWMzQixLQUFLNEIsT0FBbkI7O0FBRUFMLEtBQUluQixJQUFKLEdBQVdBLElBQVg7QUFDQW1CLEtBQUlsQixJQUFKLEdBQVdMLEtBQUtLLElBQUwsQ0FBVXdCLFNBQVYsQ0FBcUJ6QixJQUFyQixDQUFYO0FBQ0FtQixLQUFJaEIsV0FBSixHQUFrQkEsV0FBbEI7QUFDQWdCLEtBQUlmLFdBQUosR0FBa0JSLEtBQUtLLElBQUwsQ0FBVUcsV0FBVixDQUFzQnNCLFlBQXRCLENBQW9DdkIsV0FBcEMsQ0FBbEI7QUFDQWdCLEtBQUlWLFdBQUosR0FBa0JBLFdBQWxCO0FBQ0FVLEtBQUlULFdBQUosR0FBa0JkLEtBQUtLLElBQUwsQ0FBVVMsV0FBVixDQUFzQmlCLFlBQXRCLENBQW9DbEIsV0FBcEMsQ0FBbEI7O0FBRUFVLEtBQUlQLFFBQUosR0FBZUEsUUFBZjtBQUNBTyxLQUFJTixRQUFKLEdBQWVqQixLQUFLaUIsUUFBTCxDQUFjZSxTQUFkLENBQXlCaEIsUUFBekIsQ0FBZjs7QUFFQU8sS0FBSUosT0FBSixHQUFjQSxPQUFkO0FBQ0FJLEtBQUlILE9BQUosR0FBY3BCLEtBQUtvQixPQUFMLENBQWFhLFFBQWIsQ0FBdUJkLE9BQXZCLENBQWQ7O0FBRUFJLEtBQUliLFVBQUosR0FBaUJBLFVBQWpCO0FBQ0FhLEtBQUlaLFVBQUosR0FBaUJBLFVBQWpCOztBQUVBWSxLQUFJVyxLQUFKLEdBQVlsQyxLQUFLa0MsS0FBTCxDQUFXQyxNQUFYLENBQW1CQyxjQUFuQixFQUFvQ0MsWUFBcEMsRUFBbURDLGtCQUFuRCxFQUF3RUMsVUFBeEUsQ0FBWjtBQUNBaEIsS0FBSWlCLEtBQUosR0FBWUEsS0FBWjtBQUNBakIsS0FBSWEsY0FBSixHQUFxQkEsY0FBckI7QUFDQWIsS0FBSWMsWUFBSixHQUFtQkEsWUFBbkI7QUFDQWQsS0FBSWUsa0JBQUosR0FBeUJBLGtCQUF6QjtBQUNBZixLQUFJZ0IsVUFBSixHQUFpQkEsVUFBakI7O0FBRUFoQixLQUFJa0IsVUFBSixHQUFpQkEsVUFBakI7QUFDQWxCLEtBQUltQixRQUFKLEdBQWVBLFFBQWY7QUFDQW5CLEtBQUlvQixtQkFBSixHQUEwQkEsbUJBQTFCO0FBQ0FwQixLQUFJcUIsU0FBSixHQUFnQkEsU0FBaEI7QUFDQXJCLEtBQUlzQixVQUFKLEdBQWlCQSxVQUFqQjs7QUFFQSxRQUFPdEIsR0FBUDtBQUVBIiwiZmlsZSI6ImNvbXBpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBpbGUgKCBCYXNlU2V0ICwgQmFzZU1hcCAsIERvdWJseUxpbmtlZExpc3QgLCBjb3JlICkge1xuXG5cdGNvbnN0IFNldCA9IGNvcmUuc2V0Ll9TZXQoIEJhc2VTZXQgKSA7XG5cdGNvbnN0IERpY3QgPSBjb3JlLmRpY3QuZGljdC5fRGljdCggQmFzZU1hcCApIDtcblx0Y29uc3QgT3JkZXJlZERpY3QgPSBjb3JlLmRpY3Qub3JkZXJlZGRpY3QuX09yZGVyZWREaWN0KCBEaWN0ICwgQmFzZU1hcCAsIERvdWJseUxpbmtlZExpc3QgKSA7XG5cdGNvbnN0IE5hbWVkVHVwbGUgPSBjb3JlLm5hbWVkdHVwbGUuX05hbWVkVHVwbGUoIERpY3QgLCBPcmRlcmVkRGljdCApIDtcblx0Y29uc3QgRGVmYXVsdERpY3QgPSBjb3JlLmRpY3QuZGVmYXVsdGRpY3QuX0RlZmF1bHREaWN0KCBEaWN0ICwgQmFzZU1hcCApIDtcblx0Y29uc3QgQ2hhaW5NYXAgPSBjb3JlLmNoYWlubWFwLl9DaGFpbk1hcCggRGljdCAsIFNldCApIDtcblx0Y29uc3QgQ291bnRlciA9IGNvcmUuY291bnRlci5fQ291bnRlciggQmFzZU1hcCAsIERpY3QgKSA7XG5cdGNvbnN0IG5hbWVkdHVwbGUgPSBjb3JlLm5hbWVkdHVwbGUuX25hbWVkdHVwbGUoIE5hbWVkVHVwbGUgKSA7XG5cblx0Y29uc3QgYWxsID0geyB9IDtcblxuXHRhbGwuYmlzZWN0ID0gY29yZS5iaXNlY3QgO1xuXG5cdGFsbC5oZWFwcSA9IGNvcmUuaGVhcHEgO1xuXG5cdGFsbC5TZXQgPSBTZXQgO1xuXHRhbGwuc2V0ID0gY29yZS5zZXQuX3NldCggU2V0ICkgO1xuXG5cdGFsbC5NYXBwaW5nID0gY29yZS5tYXBwaW5nIDtcblxuXHRhbGwuRGljdCA9IERpY3QgO1xuXHRhbGwuZGljdCA9IGNvcmUuZGljdC5kaWN0X2RpY3QoIERpY3QgKSA7XG5cdGFsbC5PcmRlcmVkRGljdCA9IE9yZGVyZWREaWN0IDtcblx0YWxsLm9yZGVyZWRkaWN0ID0gY29yZS5kaWN0Lm9yZGVyZWRkaWN0Ll9vcmRlcmVkZGljdCggT3JkZXJlZERpY3QgKSA7XG5cdGFsbC5EZWZhdWx0RGljdCA9IERlZmF1bHREaWN0IDtcblx0YWxsLmRlZmF1bHRkaWN0ID0gY29yZS5kaWN0LmRlZmF1bHRkaWN0Ll9kZWZhdWx0ZGljdCggRGVmYXVsdERpY3QgKSA7XG5cblx0YWxsLkNoYWluTWFwID0gQ2hhaW5NYXAgO1xuXHRhbGwuY2hhaW5tYXAgPSBjb3JlLmNoYWlubWFwLl9jaGFpbm1hcCggQ2hhaW5NYXAgKSA7XG5cblx0YWxsLkNvdW50ZXIgPSBDb3VudGVyIDtcblx0YWxsLmNvdW50ZXIgPSBjb3JlLmNvdW50ZXIuX2NvdW50ZXIoIENvdW50ZXIgKSA7XG5cblx0YWxsLk5hbWVkVHVwbGUgPSBOYW1lZFR1cGxlIDtcblx0YWxsLm5hbWVkdHVwbGUgPSBuYW1lZHR1cGxlIDtcblxuXHRhbGwuZGVxdWUgPSBjb3JlLmRlcXVlLl9kZXF1ZSggVW5ib3VuZGVkRGVxdWUgLCBCb3VuZGVkRGVxdWUgLCBTaW5nbGVFbGVtZW50RGVxdWUgLCBFbXB0eURlcXVlICkgO1xuXHRhbGwuRGVxdWUgPSBEZXF1ZSA7XG5cdGFsbC5VbmJvdW5kZWREZXF1ZSA9IFVuYm91bmRlZERlcXVlIDtcblx0YWxsLkJvdW5kZWREZXF1ZSA9IEJvdW5kZWREZXF1ZSA7XG5cdGFsbC5TaW5nbGVFbGVtZW50RGVxdWUgPSBTaW5nbGVFbGVtZW50RGVxdWUgO1xuXHRhbGwuRW1wdHlEZXF1ZSA9IEVtcHR5RGVxdWUgO1xuXG5cdGFsbC5JbmRleEVycm9yID0gSW5kZXhFcnJvciA7XG5cdGFsbC5LZXlFcnJvciA9IEtleUVycm9yIDtcblx0YWxsLk5vdEltcGxlbWVudGVkRXJyb3IgPSBOb3RJbXBsZW1lbnRlZEVycm9yIDtcblx0YWxsLlR5cGVFcnJvciA9IFR5cGVFcnJvciA7XG5cdGFsbC5WYWx1ZUVycm9yID0gVmFsdWVFcnJvciA7XG5cblx0cmV0dXJuIGFsbCA7XG5cbn1cbiJdfQ==