"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DoublyLinkedList = DoublyLinkedList;
/**
 * Doubly linked list implementation
 * making use of dummy nodes for the
 * sake of simplicity.
 */

function DoublyLinkedList() {
	this.front = new Node(null, null, null);
	this.back = new Node(this.front, null, null);
	this.front.next = this.back;
	this.length = 0;
}

var Node = function Node(prev, next, value) {
	this.prev = prev;
	this.next = next;
	this.value = value;
};

var Iterator = function Iterator(front, back, current) {
	this.front = front;
	this.back = back;
	this.current = current;
};

DoublyLinkedList.prototype.insertAfter = function (iterator, value) {

	var prev = iterator.current;

	var node = new Node(prev, prev.next, value);
	prev.next.prev = node;
	prev.next = node;

	++this.length;
	return this.iterator(node);
};

DoublyLinkedList.prototype.insertBefore = function (iterator, value) {

	var next = iterator.current;

	var node = new Node(next.prev, next, value);
	next.prev.next = node;
	next.prev = node;

	++this.length;
	return this.iterator(node);
};

DoublyLinkedList.prototype.unshift = function (value) {
	return this.insertAfter(this.begin(), value);
};

DoublyLinkedList.prototype.push = function (value) {
	return this.insertBefore(this.end(), value);
};

DoublyLinkedList.prototype.erase = function (iterator) {
	var node = iterator.current;

	node.prev.next = node.next;
	node.next.prev = node.prev;

	--this.length;
	return this.iterator(node.next);
};

DoublyLinkedList.prototype.clear = function () {
	this.front.next = this.back;
	this.back.prev = this.front;
	this.length = 0;
	return this;
};

DoublyLinkedList.prototype.iterator = function (node) {
	return new Iterator(this.front, this.back, node);
};

DoublyLinkedList.prototype.begin = function () {
	return this.iterator(this.front);
};

DoublyLinkedList.prototype.end = function () {
	return this.iterator(this.back);
};

Iterator.prototype.next = function () {
	this.current = this.current.next;
	if (this.current === this.back) {
		return { done: true };
	} else {
		return {
			value: this.current.value,
			done: false
		};
	}
};

Iterator.prototype.prev = function () {
	this.current = this.current.prev;
	if (this.current === this.front) {
		return { done: true };
	} else {
		return {
			value: this.current.value,
			done: false
		};
	}
};

DoublyLinkedList.prototype[Symbol.iterator] = DoublyLinkedList.prototype.begin;
DoublyLinkedList.Node = Node;
DoublyLinkedList.Iterator = Iterator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy8wMDAtdG9vbHMvZGxsL0RvdWJseUxpbmtlZExpc3QuanMiXSwibmFtZXMiOlsiRG91Ymx5TGlua2VkTGlzdCIsImZyb250IiwiTm9kZSIsImJhY2siLCJuZXh0IiwibGVuZ3RoIiwicHJldiIsInZhbHVlIiwiSXRlcmF0b3IiLCJjdXJyZW50IiwicHJvdG90eXBlIiwiaW5zZXJ0QWZ0ZXIiLCJpdGVyYXRvciIsIm5vZGUiLCJpbnNlcnRCZWZvcmUiLCJ1bnNoaWZ0IiwiYmVnaW4iLCJwdXNoIiwiZW5kIiwiZXJhc2UiLCJjbGVhciIsImRvbmUiLCJTeW1ib2wiXSwibWFwcGluZ3MiOiI7Ozs7O1FBTWdCQSxnQixHQUFBQSxnQjtBQU5oQjs7Ozs7O0FBTU8sU0FBU0EsZ0JBQVQsR0FBOEI7QUFDcEMsTUFBS0MsS0FBTCxHQUFhLElBQUlDLElBQUosQ0FBUyxJQUFULEVBQWUsSUFBZixFQUFxQixJQUFyQixDQUFiO0FBQ0EsTUFBS0MsSUFBTCxHQUFZLElBQUlELElBQUosQ0FBUyxLQUFLRCxLQUFkLEVBQXFCLElBQXJCLEVBQTJCLElBQTNCLENBQVo7QUFDQSxNQUFLQSxLQUFMLENBQVdHLElBQVgsR0FBa0IsS0FBS0QsSUFBdkI7QUFDQSxNQUFLRSxNQUFMLEdBQWMsQ0FBZDtBQUNBOztBQUVELElBQU1ILE9BQU8sU0FBUEEsSUFBTyxDQUFTSSxJQUFULEVBQWVGLElBQWYsRUFBcUJHLEtBQXJCLEVBQTJCO0FBQ3ZDLE1BQUtELElBQUwsR0FBWUEsSUFBWjtBQUNBLE1BQUtGLElBQUwsR0FBWUEsSUFBWjtBQUNBLE1BQUtHLEtBQUwsR0FBYUEsS0FBYjtBQUNBLENBSkQ7O0FBTUEsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLENBQVNQLEtBQVQsRUFBZ0JFLElBQWhCLEVBQXNCTSxPQUF0QixFQUE4QjtBQUM5QyxNQUFLUixLQUFMLEdBQWFBLEtBQWI7QUFDQSxNQUFLRSxJQUFMLEdBQVlBLElBQVo7QUFDQSxNQUFLTSxPQUFMLEdBQWVB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S0FBS04sSUFBMUIsRUFBZ0M7QUFDL0IsU0FBTyxFQUFFa0IsTUFBTyxJQUFULEVBQVA7QUFDQSxFQUZELE1BR0s7QUFDSixTQUFPO0FBQ05kLFVBQVEsS0FBS0UsT0FBTCxDQUFhRixLQURmO0FBRU5jLFNBQU87QUFGRCxHQUFQO0FBSUE7QUFDRCxDQVpEOztBQWNBYixTQUFTRSxTQUFULENBQW1CSixJQUFuQixHQUNBLFlBQVU7QUFDVCxNQUFLRyxPQUFMLEdBQWUsS0FBS0EsT0FBTCxDQUFhSCxJQUE1QjtBQUNBLEtBQUksS0FBS0csT0FBTCxLQUFpQixLQUFLUixLQUExQixFQUFpQztBQUNoQyxTQUFPLEVBQUVvQixNQUFPLElBQVQsRUFBUDtBQUNBLEVBRkQsTUFHSztBQUNKLFNBQU87QUFDTmQsVUFBUSxLQUFLRSxPQUFMLENBQWFGLEtBRGY7QUFFTmMsU0FBTztBQUZELEdBQVA7QUFJQTtBQUNELENBWkQ7O0FBY0FyQixpQkFBaUJVLFNBQWpCLENBQTJCWSxPQUFPVixRQUFsQyxJQUE4Q1osaUJBQWlCVSxTQUFqQixDQUEyQk0sS0FBekU7QUFDQWhCLGlCQUFpQkUsSUFBakIsR0FBd0JBLElBQXhCO0FBQ0FGLGlCQUFpQlEsUUFBakIsR0FBNEJBLFFBQTVCIiwiZmlsZSI6IkRvdWJseUxpbmtlZExpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERvdWJseSBsaW5rZWQgbGlzdCBpbXBsZW1lbnRhdGlvblxuICogbWFraW5nIHVzZSBvZiBkdW1teSBub2RlcyBmb3IgdGhlXG4gKiBzYWtlIG9mIHNpbXBsaWNpdHkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIERvdWJseUxpbmtlZExpc3QgKCApIHtcblx0dGhpcy5mcm9udCA9IG5ldyBOb2RlKG51bGwsIG51bGwsIG51bGwpO1xuXHR0aGlzLmJhY2sgPSBuZXcgTm9kZSh0aGlzLmZyb250LCBudWxsLCBudWxsKTtcblx0dGhpcy5mcm9udC5uZXh0ID0gdGhpcy5iYWNrO1xuXHR0aGlzLmxlbmd0aCA9IDA7XG59XG5cbmNvbnN0IE5vZGUgPSBmdW5jdGlvbihwcmV2LCBuZXh0LCB2YWx1ZSl7XG5cdHRoaXMucHJldiA9IHByZXY7XG5cdHRoaXMubmV4dCA9IG5leHQ7XG5cdHRoaXMudmFsdWUgPSB2YWx1ZTtcbn07XG5cbmNvbnN0IEl0ZXJhdG9yID0gZnVuY3Rpb24oZnJvbnQsIGJhY2ssIGN1cnJlbnQpe1xuXHR0aGlzLmZyb250ID0gZnJvbnQ7XG5cdHRoaXMuYmFjayA9IGJhY2s7XG5cdHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG59O1xuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCB2YWx1ZSl7XG5cblx0Y29uc3QgcHJldiA9IGl0ZXJhdG9yLmN1cnJlbnQ7XG5cblx0Y29uc3Qgbm9kZSA9IG5ldyBOb2RlKHByZXYsIHByZXYubmV4dCwgdmFsdWUpO1xuXHRwcmV2Lm5leHQucHJldiA9IG5vZGU7XG5cdHByZXYubmV4dCA9IG5vZGU7XG5cblx0Kyt0aGlzLmxlbmd0aDtcblx0cmV0dXJuIHRoaXMuaXRlcmF0b3Iobm9kZSk7XG59O1xuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbihpdGVyYXRvciwgdmFsdWUpe1xuXG5cdGNvbnN0IG5leHQgPSBpdGVyYXRvci5jdXJyZW50O1xuXG5cdGNvbnN0IG5vZGUgPSBuZXcgTm9kZShuZXh0LnByZXYsIG5leHQsIHZhbHVlKTtcblx0bmV4dC5wcmV2Lm5leHQgPSBub2RlO1xuXHRuZXh0LnByZXYgPSBub2RlO1xuXG5cdCsrdGhpcy5sZW5ndGg7XG5cdHJldHVybiB0aGlzLml0ZXJhdG9yKG5vZGUpO1xufTtcblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0cmV0dXJuIHRoaXMuaW5zZXJ0QWZ0ZXIodGhpcy5iZWdpbigpLCB2YWx1ZSk7XG59O1xuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24odmFsdWUpe1xuXHRyZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUodGhpcy5lbmQoKSwgdmFsdWUpO1xufTtcblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuZXJhc2UgPSBmdW5jdGlvbihpdGVyYXRvcil7XG5cdGNvbnN0IG5vZGUgPSBpdGVyYXRvci5jdXJyZW50O1xuXG5cdG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuXHRub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcblxuXHQtLXRoaXMubGVuZ3RoO1xuXHRyZXR1cm4gdGhpcy5pdGVyYXRvcihub2RlLm5leHQpO1xufTtcblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpe1xuXHR0aGlzLmZyb250Lm5leHQgPSB0aGlzLmJhY2s7XG5cdHRoaXMuYmFjay5wcmV2ID0gdGhpcy5mcm9udDtcblx0dGhpcy5sZW5ndGggPSAwO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24obm9kZSl7XG5cdHJldHVybiBuZXcgSXRlcmF0b3IodGhpcy5mcm9udCwgdGhpcy5iYWNrLCBub2RlKTtcbn07XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmJlZ2luID0gZnVuY3Rpb24oKXtcblx0cmV0dXJuIHRoaXMuaXRlcmF0b3IodGhpcy5mcm9udCk7XG59O1xuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpe1xuXHRyZXR1cm4gdGhpcy5pdGVyYXRvcih0aGlzLmJhY2spO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPVxuZnVuY3Rpb24oKXtcblx0dGhpcy5jdXJyZW50ID0gdGhpcy5jdXJyZW50Lm5leHQ7XG5cdGlmICh0aGlzLmN1cnJlbnQgPT09IHRoaXMuYmFjaykge1xuXHRcdHJldHVybiB7IGRvbmUgOiB0cnVlIH07XG5cdH1cblx0ZWxzZSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlIDogdGhpcy5jdXJyZW50LnZhbHVlLFxuXHRcdFx0ZG9uZSA6IGZhbHNlXG5cdFx0fTtcblx0fVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnByZXYgPVxuZnVuY3Rpb24oKXtcblx0dGhpcy5jdXJyZW50ID0gdGhpcy5jdXJyZW50LnByZXY7XG5cdGlmICh0aGlzLmN1cnJlbnQgPT09IHRoaXMuZnJvbnQpIHtcblx0XHRyZXR1cm4geyBkb25lIDogdHJ1ZSB9O1xuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZSA6IHRoaXMuY3VycmVudC52YWx1ZSxcblx0XHRcdGRvbmUgOiBmYWxzZVxuXHRcdH07XG5cdH1cbn07XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBEb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5iZWdpbiA7XG5Eb3VibHlMaW5rZWRMaXN0Lk5vZGUgPSBOb2RlO1xuRG91Ymx5TGlua2VkTGlzdC5JdGVyYXRvciA9IEl0ZXJhdG9yO1xuIl19