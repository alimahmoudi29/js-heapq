"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;
function compile(BaseSet, BaseMap, DoublyLinkedList, core) {

	var Set = core.set._Set(BaseSet);
	var Dict = core.dict.dict._Dict(BaseMap);
	var OrderedDict = core.dict.ordereddict._OrderedDict(Dict, BaseMap, DoublyLinkedList);
	var NamedTuple = core.namedtuple._NamedTuple(Dict, OrderedDict);
	var DefaultDict = core.dict.defaultdict._DefaultDict(Dict, BaseMap);
	var ChainMap = core.chainmap._ChainMap(Dict, Set);
	var Counter = core.counter._Counter(BaseMap, Dict);
	var namedtuple = core.namedtuple._namedtuple(NamedTuple);
	var Deque = core.deque.implementation.Deque;
	var UnboundedDeque = core.deque.implementation.UnboundedDeque;
	var BoundedDeque = core.deque.implementation.BoundedDeque;
	var SingleElementDeque = core.deque.implementation.SingleElementDeque;
	var EmptyDeque = core.deque.implementation.EmptyDeque;

	var all = {};

	all.bisect = core.bisect;

	all.heapq = core.heapq;

	all.Set = Set;
	all.set = core.set._set(Set);

	all.Mapping = core.mapping;

	all.Dict = Dict;
	all.dict = core.dict.dict._dict(Dict);
	all.OrderedDict = OrderedDict;
	all.ordereddict = core.dict.ordereddict._ordereddict(OrderedDict);
	all.DefaultDict = DefaultDict;
	all.defaultdict = core.dict.defaultdict._defaultdict(DefaultDict);

	all.ChainMap = ChainMap;
	all.chainmap = core.chainmap._chainmap(ChainMap);

	all.Counter = Counter;
	all.counter = core.counter._counter(Counter);

	all.NamedTuple = NamedTuple;
	all.namedtuple = namedtuple;

	all.deque = core.deque._deque(UnboundedDeque, BoundedDeque, SingleElementDeque, EmptyDeque);
	all.Deque = Deque;
	all.UnboundedDeque = UnboundedDeque;
	all.BoundedDeque = BoundedDeque;
	all.SingleElementDeque = SingleElementDeque;
	all.EmptyDeque = EmptyDeque;

	all.IndexError = core.error.IndexError;
	all.KeyError = core.error.KeyError;
	all.NotImplementedError = core.error.NotImplementedError;
	all.TypeError = core.error.TypeError;
	all.ValueError = core.error.ValueError;

	return all;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLmpzIl0sIm5hbWVzIjpbImNvbXBpbGUiLCJCYXNlU2V0IiwiQmFzZU1hcCIsIkRvdWJseUxpbmtlZExpc3QiLCJjb3JlIiwiU2V0Iiwic2V0IiwiX1NldCIsIkRpY3QiLCJkaWN0IiwiX0RpY3QiLCJPcmRlcmVkRGljdCIsIm9yZGVyZWRkaWN0IiwiX09yZGVyZWREaWN0IiwiTmFtZWRUdXBsZSIsIm5hbWVkdHVwbGUiLCJfTmFtZWRUdXBsZSIsIkRlZmF1bHREaWN0IiwiZGVmYXVsdGRpY3QiLCJfRGVmYXVsdERpY3QiLCJDaGFpbk1hcCIsImNoYWlubWFwIiwiX0NoYWluTWFwIiwiQ291bnRlciIsImNvdW50ZXIiLCJfQ291bnRlciIsIl9uYW1lZHR1cGxlIiwiRGVxdWUiLCJkZXF1ZSIsImltcGxlbWVudGF0aW9uIiwiVW5ib3VuZGVkRGVxdWUiLCJCb3VuZGVkRGVxdWUiLCJTaW5nbGVFbGVtZW50RGVxdWUiLCJFbXB0eURlcXVlIiwiYWxsIiwiYmlzZWN0IiwiaGVhcHEiLCJfc2V0IiwiTWFwcGluZyIsIm1hcHBpbmciLCJfZGljdCIsIl9vcmRlcmVkZGljdCIsIl9kZWZhdWx0ZGljdCIsIl9jaGFpbm1hcCIsIl9jb3VudGVyIiwiX2RlcXVlIiwiSW5kZXhFcnJvciIsImVycm9yIiwiS2V5RXJyb3IiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiVHlwZUVycm9yIiwiVmFsdWVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQ3dCQSxPO0FBQVQsU0FBU0EsT0FBVCxDQUFtQkMsT0FBbkIsRUFBNkJDLE9BQTdCLEVBQXVDQyxnQkFBdkMsRUFBMERDLElBQTFELEVBQWlFOztBQUUvRSxLQUFNQyxNQUFNRCxLQUFLRSxHQUFMLENBQVNDLElBQVQsQ0FBZU4sT0FBZixDQUFaO0FBQ0EsS0FBTU8sT0FBT0osS0FBS0ssSUFBTCxDQUFVQSxJQUFWLENBQWVDLEtBQWYsQ0FBc0JSLE9BQXRCLENBQWI7QUFDQSxLQUFNUyxjQUFjUCxL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QWpCOztBQUVBQyxLQUFJWSxVQUFKLEdBQWlCMUMsS0FBSzJDLEtBQUwsQ0FBV0QsVUFBNUI7QUFDQVosS0FBSWMsUUFBSixHQUFlNUMsS0FBSzJDLEtBQUwsQ0FBV0MsUUFBMUI7QUFDQWQsS0FBSWUsbUJBQUosR0FBMEI3QyxLQUFLMkMsS0FBTCxDQUFXRSxtQkFBckM7QUFDQWYsS0FBSWdCLFNBQUosR0FBZ0I5QyxLQUFLMkMsS0FBTCxDQUFXRyxTQUEzQjtBQUNBaEIsS0FBSWlCLFVBQUosR0FBaUIvQyxLQUFLMkMsS0FBTCxDQUFXSSxVQUE1Qjs7QUFFQSxRQUFPakIsR0FBUDtBQUVBIiwiZmlsZSI6ImNvbXBpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBpbGUgKCBCYXNlU2V0ICwgQmFzZU1hcCAsIERvdWJseUxpbmtlZExpc3QgLCBjb3JlICkge1xuXG5cdGNvbnN0IFNldCA9IGNvcmUuc2V0Ll9TZXQoIEJhc2VTZXQgKSA7XG5cdGNvbnN0IERpY3QgPSBjb3JlLmRpY3QuZGljdC5fRGljdCggQmFzZU1hcCApIDtcblx0Y29uc3QgT3JkZXJlZERpY3QgPSBjb3JlLmRpY3Qub3JkZXJlZGRpY3QuX09yZGVyZWREaWN0KCBEaWN0ICwgQmFzZU1hcCAsIERvdWJseUxpbmtlZExpc3QgKSA7XG5cdGNvbnN0IE5hbWVkVHVwbGUgPSBjb3JlLm5hbWVkdHVwbGUuX05hbWVkVHVwbGUoIERpY3QgLCBPcmRlcmVkRGljdCApIDtcblx0Y29uc3QgRGVmYXVsdERpY3QgPSBjb3JlLmRpY3QuZGVmYXVsdGRpY3QuX0RlZmF1bHREaWN0KCBEaWN0ICwgQmFzZU1hcCApIDtcblx0Y29uc3QgQ2hhaW5NYXAgPSBjb3JlLmNoYWlubWFwLl9DaGFpbk1hcCggRGljdCAsIFNldCApIDtcblx0Y29uc3QgQ291bnRlciA9IGNvcmUuY291bnRlci5fQ291bnRlciggQmFzZU1hcCAsIERpY3QgKSA7XG5cdGNvbnN0IG5hbWVkdHVwbGUgPSBjb3JlLm5hbWVkdHVwbGUuX25hbWVkdHVwbGUoIE5hbWVkVHVwbGUgKSA7XG5cdGNvbnN0IERlcXVlID0gY29yZS5kZXF1ZS5pbXBsZW1lbnRhdGlvbi5EZXF1ZSA7XG5cdGNvbnN0IFVuYm91bmRlZERlcXVlID0gY29yZS5kZXF1ZS5pbXBsZW1lbnRhdGlvbi5VbmJvdW5kZWREZXF1ZSA7XG5cdGNvbnN0IEJvdW5kZWREZXF1ZSA9IGNvcmUuZGVxdWUuaW1wbGVtZW50YXRpb24uQm91bmRlZERlcXVlIDtcblx0Y29uc3QgU2luZ2xlRWxlbWVudERlcXVlID0gY29yZS5kZXF1ZS5pbXBsZW1lbnRhdGlvbi5TaW5nbGVFbGVtZW50RGVxdWUgO1xuXHRjb25zdCBFbXB0eURlcXVlID0gY29yZS5kZXF1ZS5pbXBsZW1lbnRhdGlvbi5FbXB0eURlcXVlIDtcblxuXHRjb25zdCBhbGwgPSB7IH0gO1xuXG5cdGFsbC5iaXNlY3QgPSBjb3JlLmJpc2VjdCA7XG5cblx0YWxsLmhlYXBxID0gY29yZS5oZWFwcSA7XG5cblx0YWxsLlNldCA9IFNldCA7XG5cdGFsbC5zZXQgPSBjb3JlLnNldC5fc2V0KCBTZXQgKSA7XG5cblx0YWxsLk1hcHBpbmcgPSBjb3JlLm1hcHBpbmcgO1xuXG5cdGFsbC5EaWN0ID0gRGljdCA7XG5cdGFsbC5kaWN0ID0gY29yZS5kaWN0LmRpY3QuX2RpY3QoIERpY3QgKSA7XG5cdGFsbC5PcmRlcmVkRGljdCA9IE9yZGVyZWREaWN0IDtcblx0YWxsLm9yZGVyZWRkaWN0ID0gY29yZS5kaWN0Lm9yZGVyZWRkaWN0Ll9vcmRlcmVkZGljdCggT3JkZXJlZERpY3QgKSA7XG5cdGFsbC5EZWZhdWx0RGljdCA9IERlZmF1bHREaWN0IDtcblx0YWxsLmRlZmF1bHRkaWN0ID0gY29yZS5kaWN0LmRlZmF1bHRkaWN0Ll9kZWZhdWx0ZGljdCggRGVmYXVsdERpY3QgKSA7XG5cblx0YWxsLkNoYWluTWFwID0gQ2hhaW5NYXAgO1xuXHRhbGwuY2hhaW5tYXAgPSBjb3JlLmNoYWlubWFwLl9jaGFpbm1hcCggQ2hhaW5NYXAgKSA7XG5cblx0YWxsLkNvdW50ZXIgPSBDb3VudGVyIDtcblx0YWxsLmNvdW50ZXIgPSBjb3JlLmNvdW50ZXIuX2NvdW50ZXIoIENvdW50ZXIgKSA7XG5cblx0YWxsLk5hbWVkVHVwbGUgPSBOYW1lZFR1cGxlIDtcblx0YWxsLm5hbWVkdHVwbGUgPSBuYW1lZHR1cGxlIDtcblxuXHRhbGwuZGVxdWUgPSBjb3JlLmRlcXVlLl9kZXF1ZSggVW5ib3VuZGVkRGVxdWUgLCBCb3VuZGVkRGVxdWUgLCBTaW5nbGVFbGVtZW50RGVxdWUgLCBFbXB0eURlcXVlICkgO1xuXHRhbGwuRGVxdWUgPSBEZXF1ZSA7XG5cdGFsbC5VbmJvdW5kZWREZXF1ZSA9IFVuYm91bmRlZERlcXVlIDtcblx0YWxsLkJvdW5kZWREZXF1ZSA9IEJvdW5kZWREZXF1ZSA7XG5cdGFsbC5TaW5nbGVFbGVtZW50RGVxdWUgPSBTaW5nbGVFbGVtZW50RGVxdWUgO1xuXHRhbGwuRW1wdHlEZXF1ZSA9IEVtcHR5RGVxdWUgO1xuXG5cdGFsbC5JbmRleEVycm9yID0gY29yZS5lcnJvci5JbmRleEVycm9yIDtcblx0YWxsLktleUVycm9yID0gY29yZS5lcnJvci5LZXlFcnJvciA7XG5cdGFsbC5Ob3RJbXBsZW1lbnRlZEVycm9yID0gY29yZS5lcnJvci5Ob3RJbXBsZW1lbnRlZEVycm9yIDtcblx0YWxsLlR5cGVFcnJvciA9IGNvcmUuZXJyb3IuVHlwZUVycm9yIDtcblx0YWxsLlZhbHVlRXJyb3IgPSBjb3JlLmVycm9yLlZhbHVlRXJyb3IgO1xuXG5cdHJldHVybiBhbGwgO1xuXG59XG4iXX0=