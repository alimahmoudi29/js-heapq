'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = UnboundedDeque;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UnboundedDeque(iterable) {

	this.growth = 2;

	this.minsize = 10;

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
}

UnboundedDeque.prototype = new _ArbitrarySizeDeque2.default();

UnboundedDeque.prototype._copy = function (container) {

	var len = this.length;

	for (var i = 0; i < len; ++i) {
		container[i] = this.get(i);
	}
};

UnboundedDeque.prototype._realloc = function (newsize) {

	var container = new Array(newsize);

	this._copy(container);

	this.container = container;

	this.center = 0;

	this.currentsize = newsize;
};

UnboundedDeque.prototype._shrink = function () {

	var newsize = Math.max(this.minsize, this.length * this.growth);

	if (newsize * this.growth >= this.currentsize) return;

	this._realloc(newsize);
};

UnboundedDeque.prototype._grow = function (newlen) {

	if (newlen <= this.currentsize) return;

	this._realloc(newlen * this.growth);
};

UnboundedDeque.prototype.len = function () {

	return this.length;
};

UnboundedDeque.prototype.capacity = function () {

	return this.currentsize;
};

UnboundedDeque.prototype.append = function (x) {

	this._grow(this.length + 1);

	var i = (this.center + this.length) % this.currentsize;
	this.container[i] = x;
	++this.length;

	return this;
};

UnboundedDeque.prototype.appendleft = function (x) {

	this._grow(this.length + 1);

	--this.center;
	this.center += this.currentsize;
	this.center %= this.currentsize;
	this.container[this.center] = x;

	++this.length;

	return this;
};

UnboundedDeque.prototype.clear = function () {

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	return this;
};

UnboundedDeque.prototype.copy = function () {

	return new UnboundedDeque(this);
};

UnboundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.currentsize];
};

UnboundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	this._shrink();

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9jb3JlL1VuYm91bmRlZERlcXVlLmpzIl0sIm5hbWVzIjpbIlVuYm91bmRlZERlcXVlIiwiaXRlcmFibGUiLCJncm93dGgiLCJtaW5zaXplIiwiY3VycmVudHNpemUiLCJjb250YWluZXIiLCJBcnJheSIsImNlbnRlciIsImxlbmd0aCIsImV4dGVuZCIsInByb3RvdHlwZSIsIl9jb3B5IiwibGVuIiwiaSIsImdldCIsIl9yZWFsbG9jIiwibmV3c2l6ZSIsIl9zaHJpbmsiLCJNYXRoIiwibWF4IiwiX2dyb3ciLCJuZXdsZW4iLCJjYXBhY2l0eSIsImFwcGVuZCIsIngiLCJhcHBlbmRsZWZ0IiwiY2xlYXIiLCJjb3B5IiwiX3doZXJlIiwiX2NoZWNrYm91bmRzIiwiX3BvcGluZGV4IiwiaW5kZXgiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxjOztBQUZ4Qjs7Ozs7O0FBRWUsU0FBU0EsY0FBVCxDQUEwQkMsUUFBMUIsRUFBcUM7O0FBRW5ELE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE9BQUwsR0FBZSxFQUFmOztBQUVBLE1BQUtDLFdBQUwsR0FBbUIsS0FBS0QsT0FBeEI7O0FBRUEsTUFBS0UsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVcsS0FBS0YsV0FBaEIsQ0FBakI7O0FBRUEsTUFBS0csTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsS0FBS1AsYUFBYSxJQUFsQixFQUF5QixLQUFLUSxNQUFMLENBQWFSLFFBQWI7QUFHekI7O0FBRURELGVBQWVVLFNBQWYsR0FBMkIsa0NBQTNCOztBQUVBVixlQUFlVSxTQUFmLENBQXlCQyxLQUF6QixHQUFpQyxVQUFXTixTQUFYLEVBQXVCOztBQUV2RCxLQUFNTyxNQUFNLEtBQUtKLE1BQWpCOztBQUVBLE1BQU0sSUFBSUssSUFBSSxDQUFkLEVBQWtCQSxJQUFJRCxHQUF0QixFQUE0QixFQUFFQyxDQUE5QjtB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LElBQXNCLEtBQUtULFdBQTlDLENBQVA7QUFFQSxDQU5EOztBQVNBSixlQUFlVSxTQUFmLENBQXlCb0IsU0FBekIsR0FBcUMsVUFBV3pCLFNBQVgsRUFBdUIwQixLQUF2QixFQUErQjs7QUFFbkUsS0FBTUMsUUFBUTNCLFVBQVUwQixLQUFWLENBQWQ7O0FBRUE7QUFDQTtBQUNBMUIsV0FBVTBCLEtBQVYsSUFBbUIsQ0FBbkI7O0FBRUEsR0FBRSxLQUFLdkIsTUFBUDs7QUFFQSxNQUFLUyxPQUFMOztBQUVBLFFBQU9lLEtBQVA7QUFFQSxDQWREIiwiZmlsZSI6IlVuYm91bmRlZERlcXVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFyYml0cmFyeVNpemVEZXF1ZSBmcm9tICcuL0FyYml0cmFyeVNpemVEZXF1ZScgO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVbmJvdW5kZWREZXF1ZSAoIGl0ZXJhYmxlICkge1xuXG5cdHRoaXMuZ3Jvd3RoID0gMiA7XG5cblx0dGhpcy5taW5zaXplID0gMTAgO1xuXG5cdHRoaXMuY3VycmVudHNpemUgPSB0aGlzLm1pbnNpemUgO1xuXG5cdHRoaXMuY29udGFpbmVyID0gbmV3IEFycmF5KCB0aGlzLmN1cnJlbnRzaXplICkgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHRpZiAoIGl0ZXJhYmxlICE9PSBudWxsICkgdGhpcy5leHRlbmQoIGl0ZXJhYmxlICkgO1xuXG5cbn1cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlID0gbmV3IEFyYml0cmFyeVNpemVEZXF1ZSggKSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fY29weSA9IGZ1bmN0aW9uICggY29udGFpbmVyICkge1xuXG5cdGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoIDtcblxuXHRmb3IgKCBsZXQgaSA9IDAgOyBpIDwgbGVuIDsgKytpICkgY29udGFpbmVyW2ldID0gdGhpcy5nZXQoIGkgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3JlYWxsb2MgPSBmdW5jdGlvbiAoIG5ld3NpemUgKSB7XG5cblx0Y29uc3QgY29udGFpbmVyID0gbmV3IEFycmF5KCBuZXdzaXplICkgO1xuXG5cdHRoaXMuX2NvcHkoIGNvbnRhaW5lciApIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lciA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmN1cnJlbnRzaXplID0gbmV3c2l6ZSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fc2hyaW5rID0gZnVuY3Rpb24gKCApIHtcblxuXHRjb25zdCBuZXdzaXplID0gTWF0aC5tYXgoIHRoaXMubWluc2l6ZSAsIHRoaXMubGVuZ3RoICogdGhpcy5ncm93dGggKSA7XG5cblx0aWYgKCBuZXdzaXplICogdGhpcy5ncm93dGggPj0gdGhpcy5jdXJyZW50c2l6ZSApIHJldHVybiA7XG5cblx0dGhpcy5fcmVhbGxvYyggbmV3c2l6ZSApIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fZ3JvdyA9IGZ1bmN0aW9uICggbmV3bGVuICkge1xuXG5cdGlmICggbmV3bGVuIDw9IHRoaXMuY3VycmVudHNpemUgKSByZXR1cm4gO1xuXG5cdHRoaXMuX3JlYWxsb2MoIG5ld2xlbiAqIHRoaXMuZ3Jvd3RoICkgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUubGVuID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5sZW5ndGggO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5jdXJyZW50c2l6ZSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0dGhpcy5fZ3JvdyggdGhpcy5sZW5ndGggKyAxICkgO1xuXG5cdGNvbnN0IGkgPSAoIHRoaXMuY2VudGVyICsgdGhpcy5sZW5ndGggKSAlIHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY29udGFpbmVyW2ldID0geCA7XG5cdCsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmRsZWZ0ID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdHRoaXMuX2dyb3coIHRoaXMubGVuZ3RoICsgMSApIDtcblxuXHQtLXRoaXMuY2VudGVyIDtcblx0dGhpcy5jZW50ZXIgKz0gdGhpcy5jdXJyZW50c2l6ZTtcblx0dGhpcy5jZW50ZXIgJT0gdGhpcy5jdXJyZW50c2l6ZTtcblx0dGhpcy5jb250YWluZXJbdGhpcy5jZW50ZXJdID0geCA7XG5cblx0Kyt0aGlzLmxlbmd0aCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCApIHtcblxuXHR0aGlzLmN1cnJlbnRzaXplID0gdGhpcy5taW5zaXplIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggdGhpcy5jdXJyZW50c2l6ZSApIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiBuZXcgVW5ib3VuZGVkRGVxdWUoIHRoaXMgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3doZXJlID0gZnVuY3Rpb24gKCBpICkge1xuXG5cdHRoaXMuX2NoZWNrYm91bmRzKCBpICkgO1xuXG5cdHJldHVybiBbIHRoaXMuY29udGFpbmVyICwgKCB0aGlzLmNlbnRlciArIGkgKSAlIHRoaXMuY3VycmVudHNpemVdIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9wb3BpbmRleCA9IGZ1bmN0aW9uICggY29udGFpbmVyICwgaW5kZXggKSB7XG5cblx0Y29uc3QgdmFsdWUgPSBjb250YWluZXJbaW5kZXhdIDtcblxuXHQvLyBHQ1xuXHQvLyBUT0RPIHVzZSBudWxsIGluc3RlYWQgb2YgMCBmb3Igbm9uLU51bWJlciBkZXF1ZXNcblx0Y29udGFpbmVyW2luZGV4XSA9IDAgO1xuXG5cdC0tdGhpcy5sZW5ndGggO1xuXG5cdHRoaXMuX3NocmluayggKSA7XG5cblx0cmV0dXJuIHZhbHVlIDtcblxufSA7XG4iXX0=