'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = BoundedDeque;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BoundedDeque(iterable, maxlen) {

	this.maxlen = maxlen;

	this.container = new Array(maxlen);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
}

BoundedDeque.prototype = new _ArbitrarySizeDeque2.default();

BoundedDeque.prototype.len = function () {

	return this.length;
};

BoundedDeque.prototype.capacity = function () {

	return this.maxlen;
};

BoundedDeque.prototype.append = function (x) {

	if (this.length === this.maxlen) {

		this.container[this.center] = x;
		++this.center;
		this.center %= this.maxlen;
	} else {

		var i = (this.center + this.length) % this.maxlen;
		this.container[i] = x;
		++this.length;
	}

	return this;
};

BoundedDeque.prototype.appendleft = function (x) {

	--this.center;
	this.center += this.maxlen;
	this.center %= this.maxlen;
	this.container[this.center] = x;

	if (this.length < this.maxlen) ++this.length;

	return this;
};

BoundedDeque.prototype.clear = function () {

	this.center = 0;

	this.length = 0;

	this.container = new Array(this.maxlen);

	return this;
};

BoundedDeque.prototype.copy = function () {

	return new BoundedDeque(this, this.maxlen);
};

BoundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.maxlen];
};

BoundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9jb3JlL0JvdW5kZWREZXF1ZS5qcyJdLCJuYW1lcyI6WyJCb3VuZGVkRGVxdWUiLCJpdGVyYWJsZSIsIm1heGxlbiIsImNvbnRhaW5lciIsIkFycmF5IiwiY2VudGVyIiwibGVuZ3RoIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwibGVuIiwiY2FwYWNpdHkiLCJhcHBlbmQiLCJ4IiwiaSIsImFwcGVuZGxlZnQiLCJjbGVhciIsImNvcHkiLCJfd2hlcmUiLCJfY2hlY2tib3VuZHMiLCJfcG9waW5kZXgiLCJpbmRleCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFFd0JBLFk7O0FBRnhCOzs7Ozs7QUFFZSxTQUFTQSxZQUFULENBQXdCQyxRQUF4QixFQUFtQ0MsTUFBbkMsRUFBNEM7O0FBRTFELE1BQUtBLE1BQUwsR0FBY0EsTUFBZDs7QUFFQSxNQUFLQyxTQUFMLEdBQWlCLElBQUlDLEtBQUosQ0FBV0YsTUFBWCxDQUFqQjs7QUFFQSxNQUFLRyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxLQUFLTCxhQUFhLElBQWxCLEVBQXlCLEtBQUtNLE1BQUwsQ0FBYU4sUUFBYjtBQUd6Qjs7QUFFREQsYUFBYVEsU0FBYixHQUF5QixrQ0FBekI7O0FBRUFSLGFBQWFRLFNBQWIsQ0FBdUJDLEdBQXZCLEdBQTZCLFlBQWE7O0FBRXpDLFFBQU8sS0FBS0gsTUFBWjtBQUVBLENBSkQ7O0FBTUFOLGFBQWFRLFNBQWIsQ0FBdUJFLFFBQXZCLEdBQWtDLFlBQWE7O0FBRTlDLFFBQU8sS0FBS1IsTUFBWjtBQUVBLENBSkQ7O0FBTUFGLGFBQWFRLFNBQWIsQ0FBdUJHLE1BQXZCLEdBQWdDLFVBQVdDLENBQVgsRUFBZTs7QUFHOUMsS0FBSyxLQUFLTixNQUFMLEtBQWdCLEtBQUtKLE1BQTFCLEVBQW1DOztBQUVsQyxPQUFLQyxTQUFMLENBQWUsS0FBS0UsTUFBcEIsSUFBOEJPLENBQTlCO0FBQ0EsSUFBRSxLQUFLUCxNQUFQO0FBQ0EsT0FBS0EsTUFBTCxJQUFlLEtBQUtILE1BQXBCO0FBRUEsRUFORCxNQVFLOztBQUVKLE1BQU1XLElBQUksQ0FBRSxLQUFLUixNQUFMLEdBQWMsS0FBS0MsTUFBckIsSUFBZ0MsS0FBS0osTUFBL0M7QUFDQSxPQUFLQyxTQUFMLENBQWVVLENBQWYsSUFBb0JELENBQXBCO0FBQ0EsSUFBRSxLQUFLTixNQUFQO0FBRUE7O0FBRUQsUUFBTyxJQUFQO0FBRUEsQ0FyQkQ7O0FBdUJBTixhQUFhUSxTQUFiLENBQXVCTSxVQUF2QixHQUFvQyxVQUFXRixDQUFYLEVBQWU7O0FBRWxELEdBQUUsS0FBS1AsTUFBUDtBQUNBLE1BQUtBLE1BQUwsSUFBZSxLQUFLSCxNQUFwQjtBQUNBLE1BQUtHLE1BQUwsSUFBZSxLQUFLSCxNQUFwQjtBQUNBLE1BQUtDLFNBQUwsQ0FBZSxLQUFLRSxNQUFwQixJQUE4Qk8sQ0FBOUI7O0FBRUEsS0FBSyxLQUFLTixNQUFMLEdBQWMsS0FBS0osTUFBeEIsRUFBaUMsRUFBRSxLQUFLSSxNQUFQOztBQUVqQyxRQUFPLElBQVA7QUFFQSxDQVhEOztBQWFBTixhQUFhUSxTQUFiLENBQXVCTyxLQUF2QixHQUErQixZQUFhOztBQUUzQyxNQUFLVixNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLSCxTQUFMLEdBQWlCLElBQUlDLEtBQUosQ0FBVyxLQUFLRixNQUFoQixDQUFqQjs7QUFFQSxRQUFPLElBQVA7QUFFQSxDQVZEOztBQVlBRixhQUFhUSxTQUFiLENBQXVCUSxJQUF2QixHQUE4QixZQUFhOztBQUUxQyxRQUFPLElBQUloQixZQUFKLENBQWtCLElBQWxCLEVBQXlCLEtBQUtFLE1BQTlCLENBQVA7QUFFQSxDQUpEOztBQVFBRixhQUFhUSxTQUFiLENBQXVCUyxNQUF2QixHQUFnQyxVQUFXSixDQUFYLEVBQWU7O0FBRTlDLE1BQUtLLFlBQUwsQ0FBbUJMLENBQW5COztBQUVBLFFBQU8sQ0FBRSxLQUFLVixTQUFQLEVBQW1CLENBQUUsS0FBS0UsTUFBTCxHQUFjUSxDQUFoQixJQUFzQixLQUFLWCxNQUE5QyxDQUFQO0FBRUEsQ0FORDs7QUFTQUYsYUFBYVEsU0FBYixDQUF1QlcsU0FBdkIsR0FBbUMsVUFBV2hCLFNBQVgsRUFBdUJpQixLQUF2QixFQUErQjs7QUFFakUsS0FBTUMsUUFBUWxCLFVBQVVpQixLQUFWLENBQWQ7O0FBRUE7QUFDQTtBQUNBakIsV0FBVWlCLEtBQVYsSUFBbUIsQ0FBbkI7O0FBRUEsR0FBRSxLQUFLZCxNQUFQOztBQUVBLFFBQU9lLEtBQVA7QUFFQSxDQVpEIiwiZmlsZSI6IkJvdW5kZWREZXF1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcmJpdHJhcnlTaXplRGVxdWUgZnJvbSAnLi9BcmJpdHJhcnlTaXplRGVxdWUnIDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm91bmRlZERlcXVlICggaXRlcmFibGUgLCBtYXhsZW4gKSB7XG5cblx0dGhpcy5tYXhsZW4gPSBtYXhsZW4gO1xuXG5cdHRoaXMuY29udGFpbmVyID0gbmV3IEFycmF5KCBtYXhsZW4gKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdGlmICggaXRlcmFibGUgIT09IG51bGwgKSB0aGlzLmV4dGVuZCggaXRlcmFibGUgKSA7XG5cblxufVxuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlID0gbmV3IEFyYml0cmFyeVNpemVEZXF1ZSggKSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUubGVuID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5sZW5ndGggO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubWF4bGVuIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cblx0aWYgKCB0aGlzLmxlbmd0aCA9PT0gdGhpcy5tYXhsZW4gKSB7XG5cblx0XHR0aGlzLmNvbnRhaW5lclt0aGlzLmNlbnRlcl0gPSB4IDtcblx0XHQrK3RoaXMuY2VudGVyIDtcblx0XHR0aGlzLmNlbnRlciAlPSB0aGlzLm1heGxlbiA7XG5cblx0fVxuXG5cdGVsc2Uge1xuXG5cdFx0Y29uc3QgaSA9ICggdGhpcy5jZW50ZXIgKyB0aGlzLmxlbmd0aCApICUgdGhpcy5tYXhsZW4gO1xuXHRcdHRoaXMuY29udGFpbmVyW2ldID0geCA7XG5cdFx0Kyt0aGlzLmxlbmd0aCA7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kbGVmdCA9IGZ1bmN0aW9uICggeCApIHtcblxuXHQtLXRoaXMuY2VudGVyIDtcblx0dGhpcy5jZW50ZXIgKz0gdGhpcy5tYXhsZW4gO1xuXHR0aGlzLmNlbnRlciAlPSB0aGlzLm1heGxlbiA7XG5cdHRoaXMuY29udGFpbmVyW3RoaXMuY2VudGVyXSA9IHggO1xuXG5cdGlmICggdGhpcy5sZW5ndGggPCB0aGlzLm1heGxlbiApICsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoICkge1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggdGhpcy5tYXhsZW4gKSA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gbmV3IEJvdW5kZWREZXF1ZSggdGhpcyAsIHRoaXMubWF4bGVuICkgO1xuXG59IDtcblxuXG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3doZXJlID0gZnVuY3Rpb24gKCBpICkge1xuXG5cdHRoaXMuX2NoZWNrYm91bmRzKCBpICkgO1xuXG5cdHJldHVybiBbIHRoaXMuY29udGFpbmVyICwgKCB0aGlzLmNlbnRlciArIGkgKSAlIHRoaXMubWF4bGVuIF0gO1xuXG59IDtcblxuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLl9wb3BpbmRleCA9IGZ1bmN0aW9uICggY29udGFpbmVyICwgaW5kZXggKSB7XG5cblx0Y29uc3QgdmFsdWUgPSBjb250YWluZXJbaW5kZXhdIDtcblxuXHQvLyBHQ1xuXHQvLyBUT0RPIHVzZSBudWxsIGluc3RlYWQgb2YgMCBmb3Igbm9uLU51bWJlciBkZXF1ZXNcblx0Y29udGFpbmVyW2luZGV4XSA9IDAgO1xuXG5cdC0tdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB2YWx1ZSA7XG5cbn0gO1xuIl19