'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = UnboundedDeque;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UnboundedDeque(iterable) {

	this.growth = 2;

	this.minsize = 10;

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

UnboundedDeque.prototype = new _ArbitrarySizeDeque2.default();

UnboundedDeque.prototype._copy = function (container) {

	var len = this.length;

	for (var i = 0; i < len; ++i) {
		container[i] = this.get(i);
	}
};

UnboundedDeque.prototype._realloc = function (newsize) {

	var container = new Array(newsize);

	this._copy(container);

	this.container = container;

	this.center = 0;

	this.currentsize = newsize;
};

UnboundedDeque.prototype._shrink = function () {

	var newsize = Math.max(this.minsize, this.length * this.growth);

	if (newsize * this.growth >= this.currentsize) return;

	this._realloc(newsize);
};

UnboundedDeque.prototype._grow = function (newlen) {

	if (newlen <= this.currentsize) return;

	this._realloc(newlen * this.growth);
};

UnboundedDeque.prototype.len = function () {

	return this.length;
};

UnboundedDeque.prototype.capacity = function () {

	return this.currentsize;
};

UnboundedDeque.prototype.append = function (x) {

	this._grow(this.length + 1);

	var i = (this.center + this.length) % this.currentsize;
	this.container[i] = x;
	++this.length;

	return this;
};

UnboundedDeque.prototype.appendleft = function (x) {

	this._grow(this.length + 1);

	--this.center;
	this.center += this.currentsize;
	this.center %= this.currentsize;
	this.container[this.center] = x;

	++this.length;

	return this;
};

UnboundedDeque.prototype.clear = function () {

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	return this;
};

UnboundedDeque.prototype.copy = function () {

	return new UnboundedDeque(this);
};

UnboundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.currentsize];
};

UnboundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	this._shrink();

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXF1ZS9jb3JlL1VuYm91bmRlZERlcXVlLmpzIl0sIm5hbWVzIjpbIlVuYm91bmRlZERlcXVlIiwiaXRlcmFibGUiLCJncm93dGgiLCJtaW5zaXplIiwiY3VycmVudHNpemUiLCJjb250YWluZXIiLCJBcnJheSIsImNlbnRlciIsImxlbmd0aCIsImV4dGVuZCIsInByb3RvdHlwZSIsIl9jb3B5IiwibGVuIiwiaSIsImdldCIsIl9yZWFsbG9jIiwibmV3c2l6ZSIsIl9zaHJpbmsiLCJNYXRoIiwibWF4IiwiX2dyb3ciLCJuZXdsZW4iLCJjYXBhY2l0eSIsImFwcGVuZCIsIngiLCJhcHBlbmRsZWZ0IiwiY2xlYXIiLCJjb3B5IiwiX3doZXJlIiwiX2NoZWNrYm91bmRzIiwiX3BvcGluZGV4IiwiaW5kZXgiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxjOztBQUZ4Qjs7Ozs7O0FBRWUsU0FBU0EsY0FBVCxDQUEwQkMsUUFBMUIsRUFBcUM7O0FBRW5ELE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE9BQUwsR0FBZSxFQUFmOztBQUVBLE1BQUtDLFdBQUwsR0FBbUIsS0FBS0QsT0FBeEI7O0FBRUEsTUFBS0UsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVcsS0FBS0YsV0FBaEIsQ0FBakI7O0FBRUEsTUFBS0csTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsS0FBS1AsYUFBYSxJQUFsQixFQUF5QixLQUFLUSxNQUFMLENBQWFSLFFBQWI7QUFHekIsQ0FBQzs7QUFFRkQsZUFBZVUsU0FBZixHQUEyQixrQ0FBM0I7O0FBRUFWLGVBQWVVLFNBQWYsQ0FBeUJDLEtBQXpCLEdBQWlDLFVBQVdOLFNBQVgsRUFBdUI7O0FBRXZELEtBQU1PLE1BQU0sS0FBS0osTUFBakI7O0FBRUEsTUFBTSxJQUFJSyxJQUFJLENBQWQsRUFBa0JBLElBQUlELEdBQXRCLEVBQTRCLEVBQUVDLENB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Q0FBaEIsSUFBc0IsS0FBS1QsV0FBOUMsQ0FBUDtBQUVBLENBTkQ7O0FBU0FKLGVBQWVVLFNBQWYsQ0FBeUJvQixTQUF6QixHQUFxQyxVQUFXekIsU0FBWCxFQUF1QjBCLEtBQXZCLEVBQStCOztBQUVuRSxLQUFNQyxRQUFRM0IsVUFBVTBCLEtBQVYsQ0FBZDs7QUFFQTtBQUNBO0FBQ0ExQixXQUFVMEIsS0FBVixJQUFtQixDQUFuQjs7QUFFQSxHQUFFLEtBQUt2QixNQUFQOztBQUVBLE1BQUtTLE9BQUw7O0FBRUEsUUFBT2UsS0FBUDtBQUVBLENBZEQiLCJmaWxlIjoiVW5ib3VuZGVkRGVxdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXJiaXRyYXJ5U2l6ZURlcXVlIGZyb20gJy4vQXJiaXRyYXJ5U2l6ZURlcXVlJyA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFVuYm91bmRlZERlcXVlICggaXRlcmFibGUgKSB7XG5cblx0dGhpcy5ncm93dGggPSAyIDtcblxuXHR0aGlzLm1pbnNpemUgPSAxMCA7XG5cblx0dGhpcy5jdXJyZW50c2l6ZSA9IHRoaXMubWluc2l6ZSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMuY3VycmVudHNpemUgKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdGlmICggaXRlcmFibGUgIT09IG51bGwgKSB0aGlzLmV4dGVuZCggaXRlcmFibGUgKSA7XG5cblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZSA9IG5ldyBBcmJpdHJhcnlTaXplRGVxdWUoICkgO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX2NvcHkgPSBmdW5jdGlvbiAoIGNvbnRhaW5lciApIHtcblxuXHRjb25zdCBsZW4gPSB0aGlzLmxlbmd0aCA7XG5cblx0Zm9yICggbGV0IGkgPSAwIDsgaSA8IGxlbiA7ICsraSApIGNvbnRhaW5lcltpXSA9IHRoaXMuZ2V0KCBpICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9yZWFsbG9jID0gZnVuY3Rpb24gKCBuZXdzaXplICkge1xuXG5cdGNvbnN0IGNvbnRhaW5lciA9IG5ldyBBcnJheSggbmV3c2l6ZSApIDtcblxuXHR0aGlzLl9jb3B5KCBjb250YWluZXIgKSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBjb250YWluZXIgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5jdXJyZW50c2l6ZSA9IG5ld3NpemUgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3NocmluayA9IGZ1bmN0aW9uICggKSB7XG5cblx0Y29uc3QgbmV3c2l6ZSA9IE1hdGgubWF4KCB0aGlzLm1pbnNpemUgLCB0aGlzLmxlbmd0aCAqIHRoaXMuZ3Jvd3RoICkgO1xuXG5cdGlmICggbmV3c2l6ZSAqIHRoaXMuZ3Jvd3RoID49IHRoaXMuY3VycmVudHNpemUgKSByZXR1cm4gO1xuXG5cdHRoaXMuX3JlYWxsb2MoIG5ld3NpemUgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX2dyb3cgPSBmdW5jdGlvbiAoIG5ld2xlbiApIHtcblxuXHRpZiAoIG5ld2xlbiA8PSB0aGlzLmN1cnJlbnRzaXplICkgcmV0dXJuIDtcblxuXHR0aGlzLl9yZWFsbG9jKCBuZXdsZW4gKiB0aGlzLmdyb3d0aCApIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubGVuZ3RoIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMuY3VycmVudHNpemUgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdHRoaXMuX2dyb3coIHRoaXMubGVuZ3RoICsgMSApIDtcblxuXHRjb25zdCBpID0gKCB0aGlzLmNlbnRlciArIHRoaXMubGVuZ3RoICkgJSB0aGlzLmN1cnJlbnRzaXplO1xuXHR0aGlzLmNvbnRhaW5lcltpXSA9IHggO1xuXHQrK3RoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kbGVmdCA9IGZ1bmN0aW9uICggeCApIHtcblxuXHR0aGlzLl9ncm93KCB0aGlzLmxlbmd0aCArIDEgKSA7XG5cblx0LS10aGlzLmNlbnRlciA7XG5cdHRoaXMuY2VudGVyICs9IHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY2VudGVyICU9IHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY29udGFpbmVyW3RoaXMuY2VudGVyXSA9IHggO1xuXG5cdCsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICggKSB7XG5cblx0dGhpcy5jdXJyZW50c2l6ZSA9IHRoaXMubWluc2l6ZSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMuY3VycmVudHNpemUgKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gbmV3IFVuYm91bmRlZERlcXVlKCB0aGlzICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl93aGVyZSA9IGZ1bmN0aW9uICggaSApIHtcblxuXHR0aGlzLl9jaGVja2JvdW5kcyggaSApIDtcblxuXHRyZXR1cm4gWyB0aGlzLmNvbnRhaW5lciAsICggdGhpcy5jZW50ZXIgKyBpICkgJSB0aGlzLmN1cnJlbnRzaXplXSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fcG9waW5kZXggPSBmdW5jdGlvbiAoIGNvbnRhaW5lciAsIGluZGV4ICkge1xuXG5cdGNvbnN0IHZhbHVlID0gY29udGFpbmVyW2luZGV4XSA7XG5cblx0Ly8gR0Ncblx0Ly8gVE9ETyB1c2UgbnVsbCBpbnN0ZWFkIG9mIDAgZm9yIG5vbi1OdW1iZXIgZGVxdWVzXG5cdGNvbnRhaW5lcltpbmRleF0gPSAwIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblxuXHR0aGlzLl9zaHJpbmsoICkgO1xuXG5cdHJldHVybiB2YWx1ZSA7XG5cbn0gO1xuIl19