"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = compile;
function compile(BaseSet, BaseMap, DLL) {
	var exports = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};


	var Set = exports._Set(BaseSet);
	var Dict = exports._Dict(BaseMap);
	var OrderedDict = exports._OrderedDict(Dict, BaseMap, DLL);
	var NamedTuple = exports._NamedTuple(Dict, OrderedDict);
	var DefaultDict = exports._DefaultDict(Dict, BaseMap);
	var ChainMap = exports._ChainMap(Dict, Set);
	var Counter = exports._Counter(BaseMap, Dict);
	var namedtuple = exports._namedtuple(NamedTuple);

	exports.bisect = bisect;

	exports.heapq = heapq;

	exports.Set = Set;
	exports.set = exports._set(Set);

	exports.Mapping = Mapping;

	exports.Dict = Dict;
	exports.dict = exports._dict(Dict);

	exports.OrderedDict = OrderedDict;
	exports.ordereddict = exports._ordereddict(OrderedDict);

	exports.DefaultDict = DefaultDict;
	exports.defaultdict = exports._defaultdict(DefaultDict);

	exports.ChainMap = ChainMap;
	exports.chainmap = exports._chainmap(ChainMap);

	exports.Counter = Counter;
	exports.counter = exports._counter(Counter);
	exports.NamedTuple = NamedTuple;
	exports.namedtuple = namedtuple;

	exports.deque = exports._deque(UnboundedDeque, BoundedDeque, SingleElementDeque, EmptyDeque);
	exports.Deque = Deque;
	exports.UnboundedDeque = UnboundedDeque;
	exports.BoundedDeque = BoundedDeque;
	exports.SingleElementDeque = SingleElementDeque;
	exports.EmptyDeque = EmptyDeque;

	exports.IndexError = IndexError;
	exports.KeyError = KeyError;
	exports.NotImplementedError = NotImplementedError;
	exports.TypeError = exports.TypeError;
	exports.ValueError = ValueError;

	return exports;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlLmpzIl0sIm5hbWVzIjpbImNvbXBpbGUiLCJCYXNlU2V0IiwiQmFzZU1hcCIsIkRMTCIsImV4cG9ydHMiLCJTZXQiLCJfU2V0IiwiRGljdCIsIl9EaWN0IiwiT3JkZXJlZERpY3QiLCJfT3JkZXJlZERpY3QiLCJOYW1lZFR1cGxlIiwiX05hbWVkVHVwbGUiLCJEZWZhdWx0RGljdCIsIl9EZWZhdWx0RGljdCIsIkNoYWluTWFwIiwiX0NoYWluTWFwIiwiQ291bnRlciIsIl9Db3VudGVyIiwibmFtZWR0dXBsZSIsIl9uYW1lZHR1cGxlIiwiYmlzZWN0IiwiaGVhcHEiLCJzZXQiLCJfc2V0IiwiTWFwcGluZyIsImRpY3QiLCJfZGljdCIsIm9yZGVyZWRkaWN0IiwiX29yZGVyZWRkaWN0IiwiZGVmYXVsdGRpY3QiLCJfZGVmYXVsdGRpY3QiLCJjaGFpbm1hcCIsIl9jaGFpbm1hcCIsImNvdW50ZXIiLCJfY291bnRlciIsImRlcXVlIiwiX2RlcXVlIiwiVW5ib3VuZGVkRGVxdWUiLCJCb3VuZGVkRGVxdWUiLCJTaW5nbGVFbGVtZW50RGVxdWUiLCJFbXB0eURlcXVlIiwiRGVxdWUiLCJJbmRleEVycm9yIiwiS2V5RXJyb3IiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiVHlwZUVycm9yIiwiVmFsdWVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQ3dCQSxPO0FBQVQsU0FBU0EsT0FBVCxDQUFtQkMsT0FBbkIsRUFBNkJDLE9BQTdCLEVBQXVDQyxHQUF2QyxFQUE2RDtBQUFBLEtBQWhCQyxPQUFnQix1RUFBTixFQUFNOzs7QUFFM0UsS0FBTUMsTUFBTUQsUUFBUUUsSUFBUixDQUFjTCxPQUFkLENBQVo7QUFDQSxLQUFNTSxPQUFPSCxRQUFRSSxLQUFSLENBQWVOLE9BQWYsQ0FBYjtBQUNBLEtBQU1PLGNBQWNMLFFBQVFNLFlBQVIsQ0FBc0JILElBQXRCLEVBQTZCTCxPQUE3QixFQUF1Q0MsR0FBdkMsQ0FBcEI7QUFDQSxLQUFNUSxhQUFhUCxRQUFRUSxXQUFSLENBQXFCTCxJQUFyQixFQUE0QkUsV0FBNUIsQ0FBbkI7QUFDQSxLQUFNSSxjQUFjVCxRQUFRVSxZQUFSLENBQXNCUCxJQUF0QixFQUE2QkwsT0FBN0IsQ0FBcEI7QUFDQSxLQUFNYSxXQUFXWCxRQUFRWSxTQUFSLENBQW1CVCxJQUFuQixFQUEwQkYsR0FBMUIsQ0FBakI7QUFDQSxLQUFNWSxVQUFVYixRQUFRYyxRQUFSLENBQWtCaEIsT0FBbEIsRUFBNEJLLElBQTVCLENBQWhCO0FBQ0EsS0FBTVksYUFBYWYsUUFBUWdCLFdBQVIsQ0FBcUJULFVBQXJCLENBQW5COztBQUVBUCxTQUFRaUIsTUFBUixHQUFpQkEsTUFBakI7O0FBRUFqQixTQUFRa0IsS0FBUixHQUFnQkEsS0FBaEI7O0FBRUFsQixTQUFRQyxHQUFSLEdBQWNBLEdBQWQ7QUFDQUQsU0FBUW1CLEdBQVIsR0FBY25CLFFBQVFvQixJQUFSLENBQWNuQixHQUFkLENBQWQ7O0FBRUFELFNBQVFxQixPQUFSLEdBQWtCQSxPQUFsQjs7QUFFQXJCLFNBQVFHLElBQVIsR0FBZUEsSUFBZjtBQUNBSCxTQUFRc0IsSUFBUixHQUFldEIsUUFBUXVCLEtBQVIsQ0FBZXBCLElBQWYsQ0FBZjs7QUFFQUgsU0FBUUssV0FBUixHQUFzQkEsV0FBdEI7QUFDQUwsU0FBUXdCLFdBQVIsR0FBc0J4QixRQUFReUIsWUFBUixDQUFzQnBCLFdBQXRCLENBQXRCOztBQUVBTCxTQUFRUyxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBVCxTQUFRMEIsV0FBUixHQUFzQjFCLFFBQVEyQixZQUFSLENBQXNCbEIsV0FBdEIsQ0FBdEI7O0FBRUFULFNBQVFXLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FYLFNBQVE0QixRQUFSLEdBQW1CNUIsUUFBUTZCLFNBQVIsQ0FBbUJsQixRQUFuQixDQUFuQjs7QUFFQVgsU0FBUWEsT0FBUixHQUFrQkEsT0FBbEI7QUFDQWIsU0FBUThCLE9BQVIsR0FBa0I5QixRQUFRK0IsUUFBUixDQUFrQmxCLE9BQWxCLENBQWxCO0FBQ0FiLFNBQVFPLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0FQLFNBQVFlLFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBZixTQUFRZ0MsS0FBUixHQUFnQmhDLFFBQVFpQyxNQUFSLENBQWdCQyxjQUFoQixFQUFpQ0MsWUFBakMsRUFBZ0RDLGtCQUFoRCxFQUFxRUMsVUFBckUsQ0FBaEI7QUFDQXJDLFNBQVFzQyxLQUFSLEdBQWdCQSxLQUFoQjtBQUNBdEMsU0FBUWtDLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FsQyxTQUFRbUMsWUFBUixHQUF1QkEsWUFBdkI7QUFDQW5DLFNBQVFvQyxrQkFBUixHQUE2QkEsa0JBQTdCO0FBQ0FwQyxTQUFRcUMsVUFBUixHQUFxQkEsVUFBckI7O0FBRUFyQyxTQUFRdUMsVUFBUixHQUFxQkEsVUFBckI7QUFDQXZDLFNBQVF3QyxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBeEMsU0FBUXlDLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQXpDLFNBQVEwQyxTQUFSLEdBQW9CMUMsUUFBUTBDLFNBQTVCO0FBQ0ExQyxTQUFRMkMsVUFBUixHQUFxQkEsVUFBckI7O0FBRUEsUUFBTzNDLE9BQVA7QUFFQSIsImZpbGUiOiJjb21waWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21waWxlICggQmFzZVNldCAsIEJhc2VNYXAgLCBETEwgLCBleHBvcnRzID0geyB9ICkge1xuXG5cdGNvbnN0IFNldCA9IGV4cG9ydHMuX1NldCggQmFzZVNldCApIDtcblx0Y29uc3QgRGljdCA9IGV4cG9ydHMuX0RpY3QoIEJhc2VNYXAgKSA7XG5cdGNvbnN0IE9yZGVyZWREaWN0ID0gZXhwb3J0cy5fT3JkZXJlZERpY3QoIERpY3QgLCBCYXNlTWFwICwgRExMICkgO1xuXHRjb25zdCBOYW1lZFR1cGxlID0gZXhwb3J0cy5fTmFtZWRUdXBsZSggRGljdCAsIE9yZGVyZWREaWN0ICkgO1xuXHRjb25zdCBEZWZhdWx0RGljdCA9IGV4cG9ydHMuX0RlZmF1bHREaWN0KCBEaWN0ICwgQmFzZU1hcCApIDtcblx0Y29uc3QgQ2hhaW5NYXAgPSBleHBvcnRzLl9DaGFpbk1hcCggRGljdCAsIFNldCApIDtcblx0Y29uc3QgQ291bnRlciA9IGV4cG9ydHMuX0NvdW50ZXIoIEJhc2VNYXAgLCBEaWN0ICkgO1xuXHRjb25zdCBuYW1lZHR1cGxlID0gZXhwb3J0cy5fbmFtZWR0dXBsZSggTmFtZWRUdXBsZSApIDtcblxuXHRleHBvcnRzLmJpc2VjdCA9IGJpc2VjdCA7XG5cblx0ZXhwb3J0cy5oZWFwcSA9IGhlYXBxIDtcblxuXHRleHBvcnRzLlNldCA9IFNldCA7XG5cdGV4cG9ydHMuc2V0ID0gZXhwb3J0cy5fc2V0KCBTZXQgKSA7XG5cblx0ZXhwb3J0cy5NYXBwaW5nID0gTWFwcGluZyA7XG5cblx0ZXhwb3J0cy5EaWN0ID0gRGljdCA7XG5cdGV4cG9ydHMuZGljdCA9IGV4cG9ydHMuX2RpY3QoIERpY3QgKSA7XG5cblx0ZXhwb3J0cy5PcmRlcmVkRGljdCA9IE9yZGVyZWREaWN0IDtcblx0ZXhwb3J0cy5vcmRlcmVkZGljdCA9IGV4cG9ydHMuX29yZGVyZWRkaWN0KCBPcmRlcmVkRGljdCApIDtcblxuXHRleHBvcnRzLkRlZmF1bHREaWN0ID0gRGVmYXVsdERpY3QgO1xuXHRleHBvcnRzLmRlZmF1bHRkaWN0ID0gZXhwb3J0cy5fZGVmYXVsdGRpY3QoIERlZmF1bHREaWN0ICkgO1xuXG5cdGV4cG9ydHMuQ2hhaW5NYXAgPSBDaGFpbk1hcCA7XG5cdGV4cG9ydHMuY2hhaW5tYXAgPSBleHBvcnRzLl9jaGFpbm1hcCggQ2hhaW5NYXAgKSA7XG5cblx0ZXhwb3J0cy5Db3VudGVyID0gQ291bnRlciA7XG5cdGV4cG9ydHMuY291bnRlciA9IGV4cG9ydHMuX2NvdW50ZXIoIENvdW50ZXIgKSA7XG5cdGV4cG9ydHMuTmFtZWRUdXBsZSA9IE5hbWVkVHVwbGUgO1xuXHRleHBvcnRzLm5hbWVkdHVwbGUgPSBuYW1lZHR1cGxlIDtcblxuXHRleHBvcnRzLmRlcXVlID0gZXhwb3J0cy5fZGVxdWUoIFVuYm91bmRlZERlcXVlICwgQm91bmRlZERlcXVlICwgU2luZ2xlRWxlbWVudERlcXVlICwgRW1wdHlEZXF1ZSApIDtcblx0ZXhwb3J0cy5EZXF1ZSA9IERlcXVlIDtcblx0ZXhwb3J0cy5VbmJvdW5kZWREZXF1ZSA9IFVuYm91bmRlZERlcXVlIDtcblx0ZXhwb3J0cy5Cb3VuZGVkRGVxdWUgPSBCb3VuZGVkRGVxdWUgO1xuXHRleHBvcnRzLlNpbmdsZUVsZW1lbnREZXF1ZSA9IFNpbmdsZUVsZW1lbnREZXF1ZSA7XG5cdGV4cG9ydHMuRW1wdHlEZXF1ZSA9IEVtcHR5RGVxdWUgO1xuXG5cdGV4cG9ydHMuSW5kZXhFcnJvciA9IEluZGV4RXJyb3IgO1xuXHRleHBvcnRzLktleUVycm9yID0gS2V5RXJyb3IgO1xuXHRleHBvcnRzLk5vdEltcGxlbWVudGVkRXJyb3IgPSBOb3RJbXBsZW1lbnRlZEVycm9yIDtcblx0ZXhwb3J0cy5UeXBlRXJyb3IgPSBleHBvcnRzLlR5cGVFcnJvciA7XG5cdGV4cG9ydHMuVmFsdWVFcnJvciA9IFZhbHVlRXJyb3IgO1xuXG5cdHJldHVybiBleHBvcnRzIDtcblxufVxuIl19