"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var UnboundedDeque = exports.UnboundedDeque = function UnboundedDeque(iterable) {

	this.growth = 2;

	this.minsize = 10;

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

UnboundedDeque.prototype = new ArbitrarySizeDeque();

UnboundedDeque.prototype._copy = function (container) {

	var len = this.length;

	for (var i = 0; i < len; ++i) {
		container[i] = this.get(i);
	}
};

UnboundedDeque.prototype._realloc = function (newsize) {

	var container = new Array(newsize);

	this._copy(container);

	this.container = container;

	this.center = 0;

	this.currentsize = newsize;
};

UnboundedDeque.prototype._shrink = function () {

	var newsize = Math.max(this.minsize, this.length * this.growth);

	if (newsize * this.growth >= this.currentsize) return;

	this._realloc(newsize);
};

UnboundedDeque.prototype._grow = function (newlen) {

	if (newlen <= this.currentsize) return;

	this._realloc(newlen * this.growth);
};

UnboundedDeque.prototype.len = function () {

	return this.length;
};

UnboundedDeque.prototype.capacity = function () {

	return this.currentsize;
};

UnboundedDeque.prototype.append = function (x) {

	this._grow(this.length + 1);

	var i = (this.center + this.length) % this.currentsize;
	this.container[i] = x;
	++this.length;

	return this;
};

UnboundedDeque.prototype.appendleft = function (x) {

	this._grow(this.length + 1);

	--this.center;
	this.center += this.currentsize;
	this.center %= this.currentsize;
	this.container[this.center] = x;

	++this.length;

	return this;
};

UnboundedDeque.prototype.clear = function () {

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	return this;
};

UnboundedDeque.prototype.copy = function () {

	return new UnboundedDeque(this);
};

UnboundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.currentsize];
};

UnboundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	container[index] = 0;

	--this.length;

	this._shrink();

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy8wMDEtYWR0L0RlcXVlL1VuYm91bmRlZERlcXVlLmpzIl0sIm5hbWVzIjpbIlVuYm91bmRlZERlcXVlIiwiaXRlcmFibGUiLCJncm93dGgiLCJtaW5zaXplIiwiY3VycmVudHNpemUiLCJjb250YWluZXIiLCJBcnJheSIsImNlbnRlciIsImxlbmd0aCIsImV4dGVuZCIsInByb3RvdHlwZSIsIkFyYml0cmFyeVNpemVEZXF1ZSIsIl9jb3B5IiwibGVuIiwiaSIsImdldCIsIl9yZWFsbG9jIiwibmV3c2l6ZSIsIl9zaHJpbmsiLCJNYXRoIiwibWF4IiwiX2dyb3ciLCJuZXdsZW4iLCJjYXBhY2l0eSIsImFwcGVuZCIsIngiLCJhcHBlbmRsZWZ0IiwiY2xlYXIiLCJjb3B5IiwiX3doZXJlIiwiX2NoZWNrYm91bmRzIiwiX3BvcGluZGV4IiwiaW5kZXgiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDTyxJQUFNQSwwQ0FBaUIsU0FBakJBLGNBQWlCLENBQVdDLFFBQVgsRUFBc0I7O0FBRW5ELE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE9BQUwsR0FBZSxFQUFmOztBQUVBLE1BQUtDLFdBQUwsR0FBa0IsS0FBS0QsT0FBdkI7O0FBRUEsTUFBS0UsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVcsS0FBS0YsV0FBaEIsQ0FBakI7O0FBRUEsTUFBS0csTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsS0FBS1AsYUFBYSxJQUFsQixFQUF5QixLQUFLUSxNQUFMLENBQWFSLFFBQWI7QUFHekIsQ0FqQk07O0FBbUJQRCxlQUFlVSxTQUFmLEdBQTJCLElBQUlDLGtCQUFKLEVBQTNCOztBQUVBWCxlQUFlVSxTQUFmLENBQXlCRSxLQUF6QixHQUFpQyxVQUFXUCxTQUFYLEVBQXVCOztBQUV2RCxLQUFNUSxNQUFNLEtBQUtMLE1BQWpCOztBQUVBLE1BQU0sSUFBSU0sSUFBSSxDQUFkLEVBQWtC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LEVBQW1CLENBQUUsS0FBS0UsTUFBTCxHQUFjTyxDQUFoQixJQUFzQixLQUFLVixXQUE5QyxDQUFQO0FBRUEsQ0FORDs7QUFTQUosZUFBZVUsU0FBZixDQUF5QnFCLFNBQXpCLEdBQXFDLFVBQVcxQixTQUFYLEVBQXVCMkIsS0FBdkIsRUFBK0I7O0FBRW5FLEtBQU1DLFFBQVE1QixVQUFVMkIsS0FBVixDQUFkOztBQUVBO0FBQ0EzQixXQUFVMkIsS0FBVixJQUFtQixDQUFuQjs7QUFFQSxHQUFFLEtBQUt4QixNQUFQOztBQUVBLE1BQUtVLE9BQUw7O0FBRUEsUUFBT2UsS0FBUDtBQUVBLENBYkQiLCJmaWxlIjoiVW5ib3VuZGVkRGVxdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCBVbmJvdW5kZWREZXF1ZSA9IGZ1bmN0aW9uICggaXRlcmFibGUgKSB7XG5cblx0dGhpcy5ncm93dGggPSAyIDtcblxuXHR0aGlzLm1pbnNpemUgPSAxMCA7XG5cblx0dGhpcy5jdXJyZW50c2l6ZT0gdGhpcy5taW5zaXplIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggdGhpcy5jdXJyZW50c2l6ZSkgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHRpZiAoIGl0ZXJhYmxlICE9PSBudWxsICkgdGhpcy5leHRlbmQoIGl0ZXJhYmxlICkgO1xuXG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUgPSBuZXcgQXJiaXRyYXJ5U2l6ZURlcXVlKCApIDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9jb3B5ID0gZnVuY3Rpb24gKCBjb250YWluZXIgKSB7XG5cblx0Y29uc3QgbGVuID0gdGhpcy5sZW5ndGggO1xuXG5cdGZvciAoIGxldCBpID0gMCA7IGkgPCBsZW4gOyArK2kgKSBjb250YWluZXJbaV0gPSB0aGlzLmdldCggaSApIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fcmVhbGxvYyA9IGZ1bmN0aW9uICggbmV3c2l6ZSApIHtcblxuXHRjb25zdCBjb250YWluZXIgPSBuZXcgQXJyYXkoIG5ld3NpemUgKSA7XG5cblx0dGhpcy5fY29weSggY29udGFpbmVyICkgO1xuXG5cdHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMuY3VycmVudHNpemUgPSBuZXdzaXplIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9zaHJpbmsgPSBmdW5jdGlvbiAoICkge1xuXG5cdGNvbnN0IG5ld3NpemUgPSBNYXRoLm1heCggdGhpcy5taW5zaXplICwgdGhpcy5sZW5ndGggKiB0aGlzLmdyb3d0aCApIDtcblxuXHRpZiAoIG5ld3NpemUgKiB0aGlzLmdyb3d0aCA+PSB0aGlzLmN1cnJlbnRzaXplICkgcmV0dXJuIDtcblxuXHR0aGlzLl9yZWFsbG9jKCBuZXdzaXplICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9ncm93ID0gZnVuY3Rpb24gKCBuZXdsZW4gKSB7XG5cblx0aWYgKCBuZXdsZW4gPD0gdGhpcy5jdXJyZW50c2l6ZSApIHJldHVybiA7XG5cblx0dGhpcy5fcmVhbGxvYyggbmV3bGVuICogdGhpcy5ncm93dGggKSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5sZW4gPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLmxlbmd0aCA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2FwYWNpdHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLmN1cnJlbnRzaXplIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICggeCApIHtcblxuXHR0aGlzLl9ncm93KCB0aGlzLmxlbmd0aCArIDEgKSA7XG5cblx0Y29uc3QgaSA9ICggdGhpcy5jZW50ZXIgKyB0aGlzLmxlbmd0aCApICUgdGhpcy5jdXJyZW50c2l6ZTtcblx0dGhpcy5jb250YWluZXJbaV0gPSB4IDtcblx0Kyt0aGlzLmxlbmd0aCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZGxlZnQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0dGhpcy5fZ3JvdyggdGhpcy5sZW5ndGggKyAxICkgO1xuXG5cdC0tdGhpcy5jZW50ZXIgO1xuXHR0aGlzLmNlbnRlciArPSB0aGlzLmN1cnJlbnRzaXplO1xuXHR0aGlzLmNlbnRlciAlPSB0aGlzLmN1cnJlbnRzaXplO1xuXHR0aGlzLmNvbnRhaW5lclt0aGlzLmNlbnRlcl0gPSB4IDtcblxuXHQrK3RoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoICkge1xuXG5cdHRoaXMuY3VycmVudHNpemU9IHRoaXMubWluc2l6ZSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMuY3VycmVudHNpemUpIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiBuZXcgVW5ib3VuZGVkRGVxdWUoIHRoaXMgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3doZXJlID0gZnVuY3Rpb24gKCBpICkge1xuXG5cdHRoaXMuX2NoZWNrYm91bmRzKCBpICkgO1xuXG5cdHJldHVybiBbIHRoaXMuY29udGFpbmVyICwgKCB0aGlzLmNlbnRlciArIGkgKSAlIHRoaXMuY3VycmVudHNpemVdIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9wb3BpbmRleCA9IGZ1bmN0aW9uICggY29udGFpbmVyICwgaW5kZXggKSB7XG5cblx0Y29uc3QgdmFsdWUgPSBjb250YWluZXJbaW5kZXhdIDtcblxuXHQvLyBHQ1xuXHRjb250YWluZXJbaW5kZXhdID0gMCA7XG5cblx0LS10aGlzLmxlbmd0aCA7XG5cblx0dGhpcy5fc2hyaW5rKCApIDtcblxuXHRyZXR1cm4gdmFsdWUgO1xuXG59IDtcbiJdfQ==