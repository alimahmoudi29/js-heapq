"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var BoundedDeque = exports.BoundedDeque = function BoundedDeque(iterable, maxlen) {

	this.maxlen = maxlen;

	this.container = new Array(maxlen);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
};

BoundedDeque.prototype = new ArbitrarySizeDeque();

BoundedDeque.prototype.len = function () {

	return this.length;
};

BoundedDeque.prototype.capacity = function () {

	return this.maxlen;
};

BoundedDeque.prototype.append = function (x) {

	if (this.length === this.maxlen) {

		this.container[this.center] = x;
		++this.center;
		this.center %= this.maxlen;
	} else {

		var i = (this.center + this.length) % this.maxlen;
		this.container[i] = x;
		++this.length;
	}

	return this;
};

BoundedDeque.prototype.appendleft = function (x) {

	--this.center;
	this.center += this.maxlen;
	this.center %= this.maxlen;
	this.container[this.center] = x;

	if (this.length < this.maxlen) ++this.length;

	return this;
};

BoundedDeque.prototype.clear = function () {

	this.center = 0;

	this.length = 0;

	this.container = new Array(this.maxlen);

	return this;
};

BoundedDeque.prototype.copy = function () {

	return new BoundedDeque(this, this.maxlen);
};

BoundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.maxlen];
};

BoundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	container[index] = 0;

	--this.length;

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy8wMDEtYWR0L0RlcXVlL0JvdW5kZWREZXF1ZS5qcyJdLCJuYW1lcyI6WyJCb3VuZGVkRGVxdWUiLCJpdGVyYWJsZSIsIm1heGxlbiIsImNvbnRhaW5lciIsIkFycmF5IiwiY2VudGVyIiwibGVuZ3RoIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwiQXJiaXRyYXJ5U2l6ZURlcXVlIiwibGVuIiwiY2FwYWNpdHkiLCJhcHBlbmQiLCJ4IiwiaSIsImFwcGVuZGxlZnQiLCJjbGVhciIsImNvcHkiLCJfd2hlcmUiLCJfY2hlY2tib3VuZHMiLCJfcG9waW5kZXgiLCJpbmRleCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUNPLElBQU1BLHNDQUFlLFNBQWZBLFlBQWUsQ0FBV0MsUUFBWCxFQUFzQkMsTUFBdEIsRUFBK0I7O0FBRTFELE1BQUtBLE1BQUwsR0FBY0EsTUFBZDs7QUFFQSxNQUFLQyxTQUFMLEdBQWlCLElBQUlDLEtBQUosQ0FBV0YsTUFBWCxDQUFqQjs7QUFFQSxNQUFLRyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxLQUFLTCxhQUFhLElBQWxCLEVBQXlCLEtBQUtNLE1BQUwsQ0FBYU4sUUFBYjtBQUd6QixDQWJNOztBQWVQRCxhQUFhUSxTQUFiLEdBQXlCLElBQUlDLGtCQUFKLEVBQXpCOztBQUVBVCxhQUFhUSxTQUFiLENBQXVCRSxHQUF2QixHQUE2QixZQUFhOztBQUV6QyxRQUFPLEtBQUtKLE1BQVo7QUFFQSxDQUpEOztBQU1BTixhQUFhUSxTQUFiLENBQXVCRyxRQUF2QixHQUFrQyxZQUFhOztBQUU5QyxRQUFPLEtBQUtULE1BQVo7QUFFQSxDQUpEOztBQU1BRixhQUFhUSxTQUFiLENBQXVCSSxNQUF2QixHQUFnQyxVQUFXQyxDQUFYLEVBQWU7O0FBRzlDLEtBQUssS0FBS1AsTUFBTCxLQUFnQixLQUFLSixNQUExQixFQUFtQzs7QUFFbEMsT0FBS0MsU0FBTCxDQUFlLEtBQUtFLE1BQXBCLElBQThCUSxDQUE5QjtBQUNBLElBQUUsS0FBS1IsTUFBUDtBQUNBLE9BQUtBLE1BQUwsSUFBZSxLQUFLSCxNQUFwQjtBQUVBLEVBTkQsTUFRSzs7QUFFSixNQUFNWSxJQUFJLENBQUUsS0FBS1QsTUFBTCxHQUFjLEtBQUtDLE1BQXJCLElBQWdDLEtBQUtKLE1BQS9DO0FBQ0EsT0FBS0MsU0FBTCxDQUFlVyxDQUFmLElBQW9CRCxDQUFwQjtBQUNBLElBQUUsS0FBS1AsTUFBUDtBQUVBOztBQUVELFFBQU8sSUFBUDtBQUVBLENBckJEOztBQXVCQU4sYUFBYVEsU0FBYixDQUF1Qk8sVUFBdkIsR0FBb0MsVUFBV0YsQ0FBWCxFQUFlOztBQUVsRCxHQUFFLEtBQUtSLE1BQVA7QUFDQSxNQUFLQSxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFDQSxNQUFLRyxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFDQSxNQUFLQyxTQUFMLENBQWUsS0FBS0UsTUFBcEIsSUFBOEJRLENBQTlCOztBQUVBLEtBQUssS0FBS1AsTUFBTCxHQUFjLEtBQUtKLE1BQXhCLEVBQWlDLEVBQUUsS0FBS0ksTUFBUDs7QUFFakMsUUFBTyxJQUFQO0FBRUEsQ0FYRDs7QUFhQU4sYUFBYVEsU0FBYixDQUF1QlEsS0FBdkIsR0FBK0IsWUFBYTs7QUFFM0MsTUFBS1gsTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0gsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVcsS0FBS0YsTUFBaEIsQ0FBakI7O0FBRUEsUUFBTyxJQUFQO0FBRUEsQ0FWRDs7QUFZQUYsYUFBYVEsU0FBYixDQUF1QlMsSUFBdkIsR0FBOEIsWUFBYTs7QUFFMUMsUUFBTyxJQUFJakIsWUFBSixDQUFrQixJQUFsQixFQUF5QixLQUFLRSxNQUE5QixDQUFQO0FBRUEsQ0FKRDs7QUFRQUYsYUFBYVEsU0FBYixDQUF1QlUsTUFBdkIsR0FBZ0MsVUFBV0osQ0FBWCxFQUFlOztBQUU5QyxNQUFLSyxZQUFMLENBQW1CTCxDQUFuQjs7QUFFQSxRQUFPLENBQUUsS0FBS1gsU0FBUCxFQUFtQixDQUFFLEtBQUtFLE1BQUwsR0FBY1MsQ0FBaEIsSUFBc0IsS0FBS1osTUFBOUMsQ0FBUDtBQUVBLENBTkQ7O0FBU0FGLGFBQWFRLFNBQWIsQ0FBdUJZLFNBQXZCLEdBQW1DLFVBQVdqQixTQUFYLEVBQXVCa0IsS0FBdkIsRUFBK0I7O0FBRWpFLEtBQU1DLFFBQVFuQixVQUFVa0IsS0FBVixDQUFkOztBQUVBO0FBQ0FsQixXQUFVa0IsS0FBVixJQUFtQixDQUFuQjs7QUFFQSxHQUFFLEtBQUtmLE1BQVA7O0FBRUEsUUFBT2dCLEtBQVA7QUFFQSxDQVhEIiwiZmlsZSI6IkJvdW5kZWREZXF1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNvbnN0IEJvdW5kZWREZXF1ZSA9IGZ1bmN0aW9uICggaXRlcmFibGUgLCBtYXhsZW4gKSB7XG5cblx0dGhpcy5tYXhsZW4gPSBtYXhsZW4gO1xuXG5cdHRoaXMuY29udGFpbmVyID0gbmV3IEFycmF5KCBtYXhsZW4gKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdGlmICggaXRlcmFibGUgIT09IG51bGwgKSB0aGlzLmV4dGVuZCggaXRlcmFibGUgKSA7XG5cblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUgPSBuZXcgQXJiaXRyYXJ5U2l6ZURlcXVlKCApIDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5sZW4gPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLmxlbmd0aCA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gdGhpcy5tYXhsZW4gO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblxuXHRpZiAoIHRoaXMubGVuZ3RoID09PSB0aGlzLm1heGxlbiApIHtcblxuXHRcdHRoaXMuY29udGFpbmVyW3RoaXMuY2VudGVyXSA9IHggO1xuXHRcdCsrdGhpcy5jZW50ZXIgO1xuXHRcdHRoaXMuY2VudGVyICU9IHRoaXMubWF4bGVuIDtcblxuXHR9XG5cblx0ZWxzZSB7XG5cblx0XHRjb25zdCBpID0gKCB0aGlzLmNlbnRlciArIHRoaXMubGVuZ3RoICkgJSB0aGlzLm1heGxlbiA7XG5cdFx0dGhpcy5jb250YWluZXJbaV0gPSB4IDtcblx0XHQrK3RoaXMubGVuZ3RoIDtcblxuXHR9XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5hcHBlbmRsZWZ0ID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdC0tdGhpcy5jZW50ZXIgO1xuXHR0aGlzLmNlbnRlciArPSB0aGlzLm1heGxlbiA7XG5cdHRoaXMuY2VudGVyICU9IHRoaXMubWF4bGVuIDtcblx0dGhpcy5jb250YWluZXJbdGhpcy5jZW50ZXJdID0geCA7XG5cblx0aWYgKCB0aGlzLmxlbmd0aCA8IHRoaXMubWF4bGVuICkgKyt0aGlzLmxlbmd0aCA7XG5cblx0cmV0dXJuIHRoaXMgO1xuXG59IDtcblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICggKSB7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdHRoaXMuY29udGFpbmVyID0gbmV3IEFycmF5KCB0aGlzLm1heGxlbiApIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiBuZXcgQm91bmRlZERlcXVlKCB0aGlzICwgdGhpcy5tYXhsZW4gKSA7XG5cbn0gO1xuXG5cblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5fd2hlcmUgPSBmdW5jdGlvbiAoIGkgKSB7XG5cblx0dGhpcy5fY2hlY2tib3VuZHMoIGkgKSA7XG5cblx0cmV0dXJuIFsgdGhpcy5jb250YWluZXIgLCAoIHRoaXMuY2VudGVyICsgaSApICUgdGhpcy5tYXhsZW4gXSA7XG5cbn0gO1xuXG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3BvcGluZGV4ID0gZnVuY3Rpb24gKCBjb250YWluZXIgLCBpbmRleCApIHtcblxuXHRjb25zdCB2YWx1ZSA9IGNvbnRhaW5lcltpbmRleF0gO1xuXG5cdC8vIEdDXG5cdGNvbnRhaW5lcltpbmRleF0gPSAwIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdmFsdWUgO1xuXG59IDtcbiJdfQ==